# `fastlane` reports which actions are used No personal data is recorded.
# Learn more at https://github.com/fastlane/enhancer

# Customise this file! Documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs

# You should change your syntax highlighting to Ruby.
# All lines starting with a # are comments.

# This is the minimum version number required.
# Update this if you use features of a newer version:
fastlane_version "2.5.0"


desc "Adds any unregistered devices to the provisioning profile"
lane :register do
  id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  new_devices = get_unprovisioned_devices_from_hockey(app_bundle_id: id)
  register_devices(devices: new_devices)
  match(force: true)
end


platform :ios do
  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Take screenshots"
  lane :screenshot do
    snapshot
  end

  desc "In case match needs to be updated - probably never needs to be run"
  lane :update_match do
    match(readonly: false)
  end

  desc "Do CI-system keychain setup"
  lane :ci_keychains do
    create_keychain(
      name: ENV["MATCH_KEYCHAIN_NAME"],
      password: ENV["MATCH_KEYCHAIN_PASSWORD"],
      timeout: 3600,
    )

    match(readonly: true)

    sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{ENV["MATCH_KEYCHAIN_PASSWORD"]} #{ENV["MATCH_KEYCHAIN_NAME"]}")
  end

  desc "Provisions the profiles; bumps the build number; builds the app"
  lane :build do
    # Set up code signing correctly
    # (more information: https://codesigning.guide)
    match(readonly: true)

    go_rogue

    increment_build_number(
      build_number: get_version(platform: 'iOS'),
      xcodeproj: "./ios/AllAboutOlaf.xcodeproj",
    )

    # Build the app
    gym(sdk: "iphoneos10.1")
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    build

    hockey(
      api_token: ENV["HOCKEYAPP_TOKEN"],
      ipa: "./ios/build/AllAboutOlaf.ipa",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: build_notes(platform: 'iOS'),
    )
  end

  desc "Make a beta build if there have been new commits since the last beta"
  lane :auto_beta do
    last_commit = get_hockeyapp_version_commit(platform: 'iOS')
    current_commit = last_git_commit[:commit_hash]
    UI.message "In faux-git terms:"
    UI.message "origin/hockeyapp: #{last_commit}"
    UI.message "HEAD: #{current_commit}"
    UI.message "Thus, will we beta? #{last_commit != current_commit}"
    beta unless last_commit == current_commit
  end
end


platform :android do
  desc "Makes a build"
  lane :build do
    increment_version_code(
      version_code: get_version(platform: 'Android'),
      app_folder_name: "android/app",
    )

    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "android",
      print_command: true,
      print_command_output: true,
    )
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    build

    # Upload to HockeyApp
    hockey(
      api_token: ENV["HOCKEYAPP_TOKEN"],
      apk: "./android/app/build/outputs/apk/app-release-unsigned.apk",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: build_notes(platform: 'Android'),
    )
  end

  desc "Make a beta build if there have been new commits since the last beta"
  lane :auto_beta do
    last_commit = get_hockeyapp_version_commit(platform: 'Android')
    current_commit = last_git_commit[:commit_hash]
    UI.message "In faux-git terms:"
    UI.message "origin/hockeyapp: #{last_commit}"
    UI.message "HEAD: #{current_commit}"
    UI.message "Thus, will we beta? #{last_commit != current_commit}"
    beta unless last_commit == current_commit
  end
end



desc "Makes a changelog from the timespan passed"
private_lane :make_changelog do |options|
  to_ref = ENV["TRAVIS_COMMIT"] || "HEAD"
  from_ref = get_hockeyapp_version_commit(platform: options[:platform]) || "HEAD~3"

  sh("git log #{from_ref}..#{to_ref} --pretty='%an, %aD (%h)%n> %s%n' | sed 's/^/    /'")
end

desc "Get the hockeyapp version"
private_lane :get_hockeyapp_version do |options|
  latest_hockeyapp_version_number(
    api_token: hockeyapp_api_token,
    app_name: "All About Olaf",
    platform: options[:platform],
  )
end

desc "Get the commit of the latest build on HockeyApp"
private_lane :get_hockeyapp_version_commit do |options|
  parsed_latest_hockeyapp_notes(
    api_token: hockeyapp_api_token,
    app_name: "All About Olaf",
    platform: options[:platform],
  )[:commit_hash]
end

desc "Gets the version, either from Travis or from Hockey"
private_lane :get_version do |options|
  ENV["TRAVIS_BUILD_NUMBER"] || get_hockeyapp_version(platform: options[:platform]) + 1
end

private_lane :build_notes do |options|
  branch = git_branch
  sha = last_git_commit[:commit_hash]
  changelog = make_changelog(platform: options[:platform])
  "branch: #{branch}\ngit commit: #{sha}\n\n## Changelog\n#{changelog}"
end
