# All fastlane files are Ruby files.

# Customise this file! Documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs

# Set a minimum version for fastlane
fastlane_version "2.5.0"

# These lanes are non-platform-specific
desc "Adds any unregistered devices to the provisioning profile"
lane :register do
  id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  new_devices = get_unprovisioned_devices_from_hockey(app_bundle_id: id)
  register_devices(devices: new_devices)
  match(force: true)
end

desc "Bump the version string to a new version"
lane :bump do |options|
  old_version = get_package_key(key: "version")
  UI.message("Current version: #{old_version}")
  version = options[:version] || UI.input("New version: ").strip
  UI.message("Upgrading from #{old_version} to #{version}")

  # update iOS version
  increment_version_number(version_number: version, xcodeproj: "./ios/AllAboutOlaf.xcodeproj")
  # update Android version
  set_version_name(version_name: version, gradle_path: "android/app/build.gradle")
  # update package.json version
  set_package_data(data: {"version" => version})
end


platform :ios do
  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Take screenshots"
  lane :screenshot do
    snapshot
  end

  desc "Go rogue"
  lane :rogue do
    go_rogue
  end

  desc "Provisions the profiles; bumps the build number; builds the app"
  lane :build do
    # Set up code signing correctly
    # (more information: https://codesigning.guide)
    match(readonly: true)

    go_rogue

    version = get_current_bundle_version(platform: "iOS")
    build_number = get_current_build_number(platform: "iOS")
    increment_version_number(version_number: "#{version}.#{build_number}", xcodeproj: "./ios/AllAboutOlaf.xcodeproj")
    increment_build_number(build_number: build_number, xcodeproj: "./ios/AllAboutOlaf.xcodeproj")
    set_package_data(data: {"version" => "#{version}.#{build_number}"})

    # Build the app
    gym
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    build

    hockey(
      api_token: ENV["HOCKEYAPP_TOKEN"],
      ipa: "./ios/build/AllAboutOlaf.ipa",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: build_notes(platform: 'iOS'),
    )
  end

  desc "Make a beta build if there have been new commits since the last beta"
  lane :auto_beta do
    last_commit = get_hockeyapp_version_commit(platform: 'iOS')
    current_commit = last_git_commit[:commit_hash]
    UI.message "In faux-git terms:"
    UI.message "origin/hockeyapp: #{last_commit}"
    UI.message "HEAD: #{current_commit}"
    UI.message "Thus, will we beta? #{last_commit != current_commit}"
    beta unless last_commit == current_commit
  end

  # Lanes specifically for the CIs
  desc "Do CI-system keychain setup"
  lane :ci_keychains do
    token = ENV["CI_USER_TOKEN"]
    keychain = ENV["MATCH_KEYCHAIN_NAME"]
    password = ENV["MATCH_KEYCHAIN_PASSWORD"]

    # see macoscope.com/blog/simplify-your-life-with-fastlane-match
    # we're allowing the CI access to the keys repo
    File.open("#{ENV['HOME']}/.netrc", "a+") do |file|
      file << "machine github.com\n  login #{token}"
    end

    create_keychain(
      name: keychain,
      password: password,
      timeout: 3600,
    )

    match(readonly: true)

    sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{password} #{keychain}")
  end

  desc "Run iOS builds or tests, as appropriate"
  lane :ci_run do
    # I'd like to test, instead of just building, butâ€¦ Xcode's tests keep
    # failing on us. So, we just build, if we're not deploying.
    should_deploy = ENV["run_deploy"] == "yes"
    unless should_deploy
      build
    else
      auto_beta
    end
  end

  desc "In case match needs to be updated - probably never needs to be run"
  lane :update_match do
    match(readonly: false)
  end
end


platform :android do
  desc "Makes a build"
  lane :build do
    version = get_current_bundle_version(platform: "Android")
    build_number = get_current_build_number(platform: "Android")

    set_version_name(version_name: "#{version}.#{build_number}", gradle_path: "android/app/build.gradle")
    set_version_code(version_code: build_number, gradle_path: "./android/app/build.gradle")
    set_package_data(data: {"version" => "#{version}.#{build_number}"})

    gradle(
      task: "assemble",
      build_type: "Release",
      project_dir: "./android",
      print_command: true,
      print_command_output: true,
    )
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    build

    # Upload to HockeyApp
    hockey(
      api_token: ENV["HOCKEYAPP_TOKEN"],
      apk: "./android/app/build/outputs/apk/app-release-unsigned.apk",
      commit_sha: ENV["TRAVIS_COMMIT"],
      notes: build_notes(platform: 'Android'),
    )
  end

  desc "Make a beta build if there have been new commits since the last beta"
  lane :auto_beta do
    last_commit = get_hockeyapp_version_commit(platform: 'Android')
    current_commit = last_git_commit[:commit_hash]
    UI.message "In faux-git terms:"
    UI.message "origin/hockeyapp: #{last_commit}"
    UI.message "HEAD: #{current_commit}"
    UI.message "Thus, will we beta? #{last_commit != current_commit}"
    beta unless last_commit == current_commit
  end

  desc "Run the appropriate action on CI"
  lane :ci_run do
    should_deploy = ENV["run_deploy"] == "yes"
    unless should_deploy
      build
    else
      auto_beta
    end
  end
end


desc "Makes a changelog from the timespan passed"
private_lane :make_changelog do |options|
  to_ref = ENV["TRAVIS_COMMIT"] || "HEAD"
  from_ref = get_hockeyapp_version_commit(platform: options[:platform]) || "HEAD~3"

  sh("git log #{from_ref}..#{to_ref} --pretty='%an, %aD (%h)%n> %s%n' | sed 's/^/    /'")
end

desc "Get the hockeyapp version"
private_lane :get_hockeyapp_version do |options|
  latest_hockeyapp_version_number(
    api_token: ENV["HOCKEYAPP_TOKEN"],
    app_name: "All About Olaf",
    platform: options[:platform],
  )
end

desc "Get the commit of the latest build on HockeyApp"
private_lane :get_hockeyapp_version_commit do |options|
  parsed_latest_hockeyapp_notes(
    api_token: ENV["HOCKEYAPP_TOKEN"],
    app_name: "All About Olaf",
    platform: options[:platform],
  )[:commit_hash]
end

desc "Gets the version, either from Travis or from Hockey"
private_lane :get_current_build_number do |options|
  ENV["TRAVIS_BUILD_NUMBER"] || get_hockeyapp_version(platform: options[:platform]) + 1
end

private_lane :build_notes do |options|
  branch = git_branch
  sha = last_git_commit[:commit_hash]
  changelog = make_changelog(platform: options[:platform])
  "branch: #{branch}\ngit commit: #{sha}\n\n## Changelog\n#{changelog}"
end

private_lane :get_current_bundle_version do |options|
  if options[:platform] == 'Android'
    get_version_name(gradle_path: "android/app/build.gradle")
  elsif options[:platform] == 'iOS'
    get_info_plist_value(path: "ios/AllAboutOlaf/Info.plist", key: "CFBundleShortVersionString")
  end
end
