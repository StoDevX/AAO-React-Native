# All fastlane files are Ruby files.

# Customise this file! Documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs

# Set a minimum version for fastlane
fastlane_version "2.19.0"

before_all do
  # too lazy to change the name in travis, so we jut copy it here
  ENV['FL_HOCKEY_API_TOKEN'] = ENV['HOCKEY_TOKEN'] if ENV.has_key?('HOCKEY_TOKEN')

  # set up global info for `gym`
  ENV['GYM_PROJECT'] = './ios/AllAboutOlaf.xcodeproj'
  ENV['GYM_SCHEME'] = 'AllAboutOlaf'
  ENV['GYM_OUTPUT_DIRECTORY'] = './ios/build'
  ENV['GYM_OUTPUT_NAME'] = 'AllAboutOlaf'

  # set up global info for `gradle`
  ENV['FL_GRADLE_PROJECT_DIR'] = './android'

  # set up other global shared values
  lane_context[SharedValues::PRETTY_APP_NAME] = "All About Olaf"
  ENV['FL_HOCKEY_PUBLIC_IDENTIFIER'] = lane_context[SharedValues::PRETTY_APP_NAME]

  lane_context[SharedValues::GRADLE_FILE] = "#{ENV['FL_GRADLE_PROJECT_DIR']}/app/build.gradle"

  lane_context[SharedValues::VERSION_NUMBER] = case lane_context[:PLATFORM_NAME]
                                               when 'ios' then
                                                 get_info_plist_value(path: "./ios/AllAboutOlaf/Info.plist", key: "CFBundleShortVersionString")
                                               when 'android' then
                                                 get_gradle_version_name(gradle_path: lane_context[SharedValues::GRADLE_FILE])
                                               else
                                                 package_get_data(key: :version)
                                               end

  lane_context[SharedValues::BUILD_NUMBER] = current_build_number.to_s
end


# These lanes are non-platform-specific
desc "Adds any unregistered devices to the provisioning profile"
lane :register do
  id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  new_devices = get_unprovisioned_devices_from_hockey(app_bundle_id: id)
  register_devices(devices: new_devices)
  match(force: true)
end

desc "Bump the version string to a new version"
lane :bump do |options|
  old_version = package_get_data(key: :version)
  UI.message("Current version: #{old_version}")

  new_version = options[:version] || UI.input("New version: ").strip
  UI.message("Upgrading from #{old_version} to #{new_version}")

  # update iOS version
  increment_version_number(version_number: new_version, xcodeproj: ENV['GYM_PROJECT'])

  # update Android version
  set_gradle_version_name(version_name: new_version, gradle_path: lane_context[SharedValues::GRADLE_FILE])

  # update package.json version
  package_set_data(data: {:version => new_version})
end


platform :ios do
  desc "Runs all the tests"
  lane :test do
    scan(
      scheme: ENV['GYM_SCHEME'],
      project: ENV['GYM_PROJECT'],
    )
  end

  desc "Take screenshots"
  lane :screenshot do
    snapshot(
      devices: ["iPhone 7 Plus", "iPhone 6", "iPhone 5s", "iPhone 4s"],
      languages: ["en-US"],
      scheme: ENV['GYM_SCHEME'],
      project: ENV['GYM_PROJECT'],
    )
  end

  desc "Go rogue"
  lane :go_rogue do
    activate_rogue_team
  end

  desc "Provisions the profiles; bumps the build number; builds the app"
  lane :build do
    gym(sdk: "iphoneos10.1", export_method: "ad-hoc")
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    activate_rogue_team

    set_version(
      version: lane_context[SharedValues::VERSION_NUMBER],
      build: [SharedValues::BUILD_NUMBER],
    )

    match(readonly: true)

    build

    hockey(notes: release_notes)
  end

  private_lane :set_version do |options|
    increment_version_number(
      version_number: "#{options[:version]}.#{options[:build]}",
      xcodeproj: ENV['GYM_PROJECT'],
    )

    increment_build_number(
      build_number: build,
      xcodeproj: ENV['GYM_PROJECT'],
    )

    package_set_data(data: {:version => "#{options[:version]}.#{options[:build]}"})
  end

  desc "# Fix keychain issues for iOS signing"
  lane :ci_keychains do
    keychain_name = ENV["MATCH_KEYCHAIN_NAME"]
    password = ENV["MATCH_KEYCHAIN_PASSWORD"]

    create_keychain(
      name: keychain_name,
      password: password,
      timeout: 3600,
    )

    match(readonly: true)
    sh("security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{password} #{keychain_name}")
  end

  desc "Run iOS builds or tests, as appropriate"
  lane :ci_run do
    authorize_ci_for_keys

    case
      when ENV["run_deploy"] == "1" then
        auto_beta
      else
        build
    end
  end

  desc "In case match needs to be updated - probably never needs to be run"
  lane :update_match do
    match
  end
end


platform :android do
  desc "Makes a build"
  lane :build do
    gradle(
      task: "assemble",
      build_type: "Release",
      print_command: true,
      print_command_output: true,
    )
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :beta do
    set_version(
      version: lane_context[SharedValues::VERSION_NUMBER],
      build: [SharedValues::BUILD_NUMBER],
    )

    build

    # Upload to HockeyApp
    hockey(notes: release_notes)
  end

  desc "Set the version in build.gradle"
  private_lane :set_version do |options|
    set_gradle_version_name(
      version_name: "#{options[:version]}.#{options[:build]}",
      gradle_file: lane_context[SharedValues::GRADLE_FILE],
    )

    set_gradle_version_code(
      version_code: options[:build],
      gradle_file: lane_context[SharedValues::GRADLE_FILE],
    )

    package_set_data(data: {:version => "#{options[:version]}.#{options[:build]}"})
  end

  desc "Run the appropriate action on CI"
  lane :ci_run do
    authorize_ci_for_keys

    case
      when ENV["run_deploy"] == "1" then
        auto_beta
      else
        build
    end
  end
end


desc "Build the release notes: branch, commit hash, changelog"
lane :release_notes do |options|
  <<~END
  branch: #{git_branch}
  git commit: #{last_git_commit[:commit_hash]}

  ## Changelog
  #{changelog}
  END
end

desc "Makes a changelog from the time since the last commit"
lane :changelog do
  to_ref = ENV["TRAVIS_COMMIT"] || "HEAD"
  from_ref = hockeyapp_version_commit || "HEAD~3"

  sh("git log #{from_ref}..#{to_ref} --pretty='%an, %aD (%h)%n> %s%n'")
    .lines
    .map { |line| '    ' + line }
    .join
end

desc "Add the github token for stodevx-bot to the CI machine"
lane :authorize_ci_for_keys do
  token = ENV["CI_USER_TOKEN"]

  # see macoscope.com/blog/simplify-your-life-with-fastlane-match
  # we're allowing the CI access to the keys repo
  File.open("#{ENV['HOME']}/.netrc", "a+") do |file|
    file << "machine github.com\n  login #{token}"
  end
end

# It doesn't make sense to duplicate this in both platforms, and fastlane is smart
# enough to call the appropriate platform's "beta" lane.
desc "Make a beta build if there have been new commits since the last beta"
private_lane :auto_beta do
  last_commit = hockeyapp_version_commit
  current_commit = last_git_commit[:commit_hash]

  UI.message "In faux-git terms:"
  UI.message "origin/hockeyapp: #{last_commit}"
  UI.message "HEAD: #{current_commit}"
  UI.message "Thus, will we beta? #{last_commit != current_commit ? "yes" : "no"}"

  beta if last_commit != current_commit
end

# Retrieves the last-built commit from the current branch's released betas
def hockeyapp_version_commit()
  latest_hockeyapp_notes(release_branch: git_branch)[:commit_hash]
end

# Gets the "current" version, either from Travis or from Hockey
def current_build_number()
  ENV["TRAVIS_BUILD_NUMBER"] || latest_hockeyapp_version_number + 1
end
