---
version: 2.1

executors:
  node: {docker: [{image: 'circleci/node:10'}]}

  ruby: {docker: [{image: 'circleci/ruby:2.5.5'}]}

  # we pass the `command:` key to solve a weird issue (see GitHub PRs 2170 and
  # 2173). this overrides the thing and forces the container to run /bin/bash
  # as the "command" so it doesn't get confused and OOM/exhaust the build
  # resources (I have no better explanations.)
  android:
    docker: [{image: 'circleci/android:api-28-node', command: '/bin/bash'}]
    environment:
      GRADLE_USER_HOME: &gradle-home ./.gradle
      SENTRY_PROPERTIES: ../android/sentry.properties

  ios:
    macos: {xcode: '10.2.1'}
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      SENTRY_PROPERTIES: '../ios/sentry.properties'

x-environment: &x-environment
  FASTLANE_SKIP_UPDATE_CHECK: '1'
  FASTLANE_DISABLE_ANIMATION: '1'
  HOMEBREW_NO_AUTO_UPDATE: '1'

  IS_BETA: '$(test -n "$CIRCLE_TAG"; echo $?)'
  IS_SIGNED: '$(test -n $MATCH_PASSWORD && test -n $FASTLANE_PASSWORD; echo $?)'

  # The bundle identifier of your app
  APP_IDENTIFIER: 'NFMTHAZVS9.com.drewvolz.stolaf'

  # Your Apple email address
  APPLE_ID: 'aao_bot@fastmail.fm'
  APPLE_DEV_PORTAL_ID: 'hawkrives@gmail.com'

  # Your Apple Developer Team ID, if you are in multiple teams
  TEAM_ID: 'TMK6S7TPX2'
  ITC_TEAM_ID: '118781268'

  # This is a private key. It is not included in the repository.
  # Contact allaboutolaf@stolaf.edu or another admin if you need access.
  JSON_KEY_FILE: './fastlane/play-private-key.json'
  PACKAGE_NAME: 'com.allaboutolaf'

  # set up global info for `gym`
  GYM_PROJECT: './ios/AllAboutOlaf.xcodeproj'
  IOS_INFO_PLIST: './ios/AllAboutOlaf/Info.plist'
  GYM_SCHEME: 'AllAboutOlaf'
  GYM_OUTPUT_DIRECTORY: './ios/build'
  GYM_OUTPUT_NAME: 'AllAboutOlaf'
  GYM_ARCHIVE_PATH: '$(echo "./ios/archive/$APP_IDENTIFIER.xcarchive")'

  # set the testflight itunesconnect provider ID from Appfile
  PILOT_ITC_PROVIDER: '$(echo "$TEAM_ID")'

  GRADLE_FILE: './android/app/build.gradle'
  KEYSTORE_FILE: './android/app/upload-keystore.properties'

  # set up other global shared values
  PRETTY_APP_NAME: 'All About Olaf'
  ONESIGNAL_APP_NAME: 'All About Olaf'
  ONESIGNAL_APP_ID: 'a46c6f2f-a240-4908-a359-801911e9b9ea'
  APPLE_APP_ID: '$(echo "$APP_IDENTIFIER")'
  APPLE_APP_NAME: 'All About Olaf'
  APPLE_PUSH_EXTENSION_ID: 'NFMTHAZVS9.com.drewvolz.stolaf.onesignal-notification-service-extension'
  APPLE_PUSH_EXTENSION_NAME: 'All About Olaf OneSignal Notification Service Extension'

commands:
  bundler-cache:
    description: 'Save the Bundler cache'
    steps:
      - save_cache:
          key: &bundler-cache-key >-
            v2-ruby-dependencies
            {{ arch }}
            {{ checksum "Gemfile.lock" }}
          paths: [./vendor/bundle]

  bundler-restore:
    description: 'Restore the Bundler cache'
    steps:
      - restore_cache: {key: *bundler-cache-key}

  danger:
    description: 'Run Danger'
    steps:
      - run:
          command: if ! [[ $CIRCLE_PR_NUMBER ]]; then yarn run danger --id $task; fi
          when: always
          environment:
            DANGER_DISABLE_TRANSPILATION: 'true'

  gradle-cache:
    description: 'Save the Gradle cache'
    steps:
      - save_cache:
          key: &gradle-cache-key >-
            v1-gradle-dependencies
            {{ arch }}
            {{ checksum "android/gradle/wrapper/gradle-wrapper.properties" }}
            {{ checksum "android/build.gradle" }}
            {{ checksum "android/settings.gradle" }}
            {{ checksum "android/app/build.gradle" }}
            {{ checksum "node_modules/react-native/package.json" }}
          paths: [~/.gradle]

  gradle-restore:
    description: 'Restore the Gradle cache'
    steps:
      - restore_cache: {key: *gradle-cache-key}

  set-ruby-version:
    description: 'Set the Ruby Version'
    steps:
      - run: echo "ruby-2.5.5" > ~/.ruby-version

  workspace-persist-node_modules:
    description: 'Persist node_modules'
    steps:
      - persist_to_workspace: {root: ./node_modules, paths: [./*]}

  workspace-attach-node_modules:
    description: 'Attach to node_modules'
    steps:
      - attach_workspace: {at: ./node_modules}

  workspace-persist-bundler:
    description: 'Persist bundler bundle'
    steps:
      - persist_to_workspace: {root: ./.bundle, paths: [./*]}

  workspace-attach-bundler:
    description: 'Attach to bundler bundle'
    steps:
      - attach_workspace: {at: ./.bundle}

  yarn-cache:
    description: 'Save the Yarn cache'
    steps:
      - save_cache:
          key: &yarn-cache-key >-
            v3-yarn-dependencies
            {{ arch }}
            {{ checksum "yarn.lock" }}
          paths: [~/.cache/yarn, ~/Library/Caches/Yarn]

  yarn-restore:
    description: 'Restore the Yarn cache'
    steps:
      - restore_cache: {key: *yarn-cache-key}

  reconcile-git-history:
    description: "Fix CircleCI's git history"
    steps:
      - run:
          name: 'Reconcile Git histories'
          command: |
            if [ -z "$CIRCLE_TAG" ];
            then
              git checkout master
              git reset --hard origin/master
              git checkout "$CIRCLE_BRANCH"
              git reset --hard "origin/$CIRCLE_BRANCH"
            else
              echo "CIRCLE_TAG was set, didn't do anything"
            fi

  skip-if-possible:
    description: "Skip the build, if possible"
    steps:
      - name: Skip build if possible
        command: ./scripts/should-skip-build && circleci step halt || echo "Build continuing."

  coveralls:
    description: 'Run Coveralls'
    steps:
      - run:
          name: coveralls
          command: |
            export COVERALLS_SERVICE_NAME=CircleCI
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_BUILD_NUM
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              npx coveralls < ./coverage/lcov.info
            fi

workflows:
  version: 2
  analyze-and-build:
    # The way this works is, Circle runs analyze-and-build on every commit
    # to every branch.
    # Fastlane checks the environment to see if it should build or deploy,
    # and if there's a tag then it deploys (otherwise it just builds.)
    # These same jobs are run by the "nightly" workflow, which has a
    # different CIRCLE_WORKFLOW_ID, which should allow us to only deploy
    # nightlies from that branch.
    jobs: &basic-jobs
      - test
      # - cache-yarn-linux:
      #     filters: &filters {tags: {only: /.*/}}
      # - cache-bundler-linux:
      #     filters: &filters {tags: {only: /.*/}}
      # # - danger:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # # - flow:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # # - jest:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # # - prettier:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # # - eslint:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # # - data:
      # #     filters: *filters
      # #     requires: [cache-yarn-linux]
      # - ios-prepare:
      #     filters: *filters
      #     requires: []
      # - ios-build: {filters: *filters, requires: [ios-prepare]}
      # - ios-deploy: {filters: *filters, requires: [ios-build]}
      # - android-prepare:
      #     filters: *filters
      #     requires: [cache-yarn-linux, cache-bundler-linux]
      # - android-build: {filters: *filters, requires: [android-prepare]}
      # - android-deploy: {filters: *filters, requires: [android-build]}
      # - ios-bundle:
      #     filters: *filters
      #     requires: [danger, flow, jest, prettier, eslint, data]
      # - android-bundle:
      #     filters: *filters
      #     requires: [danger, flow, jest, prettier, eslint, data]
  nightly:
    triggers:
      - schedule:
          cron: 17 8 * * *
          filters: {branches: {only: [master]}}
    jobs:
      - cache-yarn-linux
      - cache-bundler-linux
      - danger: {requires: [cache-yarn-linux]}
      - flow: {requires: [cache-yarn-linux]}
      - jest: {requires: [cache-yarn-linux]}
      - prettier: {requires: [cache-yarn-linux]}
      - eslint: {requires: [cache-yarn-linux]}
      - data: {requires: [cache-yarn-linux]}
      - ios-nightly:
          requires: [danger, flow, jest, prettier, eslint, data]
      - android-nightly:
          requires:
            [danger, flow, jest, prettier, eslint, data, cache-bundler-linux]

jobs:
  cache-yarn-linux:
    executor: node
    steps:
      - checkout
      - run: yarn --version
      - run: yarn install --frozen-lockfile
      - workspace-persist-node_modules

  cache-bundler-linux:
    executor: ruby
    steps:
      - checkout
      - set-ruby-version
      - run: gem --version
      - run: ruby --version
      - run: gem install bundler
      - run: bundle --version
      - run: bundle install --frozen --path ./.bundle
      - workspace-persist-bundler

  test:
    executor: node
    steps:
      - run: env
      - run: echo $TEAM_ID
      - run: echo $PILOT_ITC_PROVIDER

  danger:
    executor: node
    environment:
      task: JS-general
    steps:
      - checkout
      - workspace-attach-node_modules
      - danger

  flow:
    executor: node
    environment:
      task: JS-flow
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent flow check --quiet | tee logs/flow
      - danger

  jest:
    executor: node
    environment:
      task: JS-jest
      JEST_JUNIT_OUTPUT: ./test-results/jest/junit.xml
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/ test-results/jest/
      - run: yarn run bundle-data
      - run: yarn run --silent test --coverage | tee logs/jest
      - danger
      - store_test_results: {path: ./test-results}
      - coveralls

  prettier:
    executor: node
    environment:
      task: JS-prettier
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/
      - run: yarn run pretty
      # to ensure that the file exists
      - run: touch logs/prettier
      - run:
          name: git diff
          command: |
            if ! git diff --quiet --stat; then
              git diff | tee logs/prettier
              exit 1
            fi
      - danger

  eslint:
    executor: node
    environment:
      task: JS-lint
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/ test-results/eslint/
      - run: yarn run bundle-data
      - run: yarn run --silent lint | tee logs/eslint
      - run: yarn run --silent lint --format junit > test-results/eslint/junit.xml
      - danger
      - store_test_results: {path: ./test-results}

  data:
    executor: node
    environment:
      task: JS-data
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/
      - run: yarn run --silent validate-data --quiet | tee logs/validate-data
      - run: yarn run --silent validate-bus-data | tee logs/validate-bus-data
      - run: yarn run bundle-data
      - run: yarn run compress-data
      - store_artifacts: {path: ./docs/}
      - danger

  android-prepare: &android-base
    executor: android
    environment: &android-env
      <<: *x-environment
      task: ANDROID-prepare
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible
      - run: cd android && ./gradlew --version
      # - gradle-restore
      - run:
          name: Download Android dependencies
          command: cd android && ./gradlew androidDependencies --console=plain
          environment:
            TERM: xterm-256color
      # - gradle-cache
      - persist_to_workspace: {root: *gradle-home, paths: [./*]}

  android-build: &android-build
    <<: *android-base
    environment: &android-build-env
      <<: *android-env
      task: ANDROID-build
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - workspace-attach-node_modules

      - set-ruby-version
      - workspace-attach-bundler

      - attach_workspace: {at: *gradle-home}

      - run:
          name: 'Restrict Gradle parallelization'
          command: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties
      - run:
          name: 'Propagate app version into build files'
          command: ./scripts/ci/propagate-version.rb
      - run:
          name: 'Authorize CI for keys, if allowed'
          command: if [[ $IS_SIGNED -eq 1 ]]; then ./scripts/ci/authorize-ci-for-keys.rb; fi
      - run:
          name: 'Install certificates, if allowed'
          command: if [[ $IS_SIGNED -eq 1 ]]; then ./scripts/ci/android/certificates.sh; fi

      - run: mkdir -p logs/

      - run:
          name: 'Build app'
          command: |
            cd ./android && ./gradlew bundleRelease && cd -
            echo $? > logs/build-status

      - run:
          name: 'Discover generated products'
          command: ./scripts/ci/android/discover-products.sh | tee ./logs/products

      # eventually, implement detox for android

      - persist_to_workspace: {root: ./logs, paths: [./*]}

      - danger

  android-deploy:
    <<: *android-base
    environment:
      <<: *android-env
      task: ANDROID-deploy
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - set-ruby-version
      - workspace-attach-bundler
      - attach_workspace: {at: ./logs}

      - run:
          name: '[nightly/beta] upload to Play Store'
          command: |
            if [[ $IS_BETA -eq 1 ]]; then
              TRACK=beta
            else if [[ $IS_NIGHTLY -eq 1 ]]; then
              TRACK=alpha
            fi

            if [[ -n $TRACK ]]; then
              bundle exec fastlane run upload_to_play_store
                --aab "$(paste -sd ',' < ./logs/products)"
                --check_superseded_tracks true
                --track "$TRACK"
            fi

      - run:
          name: '[nightly/beta] generate and upload sourcemaps'
          command: |
            if [[ $IS_BETA -eq 1 || $IS_NIGHTLY -eq 1 ]]; then
              ./scripts/ci/sourcemap-create.sh
              ./scripts/ci/sourcemap-upload.sh
            fi

      - danger

  android-build-nightly:
    <<: *android-build
    environment:
      <<: *android-build-env
      IS_NIGHTLY: '1'

  android-bundle:
    executor: node
    environment:
      task: JS-bundle-android
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent bundle:android
      - store_artifacts:
          path: ./android/app/src/main/assets/index.android.bundle
          destination: android.jsbundle
      - store_artifacts:
          path: ./android/app/src/main/assets/index.android.bundle.map
          destination: android.jsbundle.map
      - danger

  ios-prepare: &ios-base
    executor: ios
    environment: &ios-env
      <<: *x-environment
      task: IOS-prepare
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - run: yarn --version
      - run: yarn install --frozen-lockfile
      - workspace-persist-node_modules

      - set-ruby-version
      - run: gem install bundler
      - run: bundle install --frozen --path ./.bundle
      - workspace-persist-bundler

  ios-build: &ios-build
    <<: *ios-base
    environment: &ios-build-env
      <<: *ios-env
      task: IOS-build
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - workspace-attach-node_modules

      - set-ruby-version
      - workspace-attach-bundler

      - run:
          name: 'Show Xcode build settings'
          command: |
            if [[ $IS_NIGHTLY -eq 1 || $IS_BETA -eq 1 ]]; then
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings
            else
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings -derivedDataPath ./ios/build
            fi

      - run:
          name: 'Propagate app version into build files'
          command: ./scripts/ci/propagate-version.rb
      - run:
          name: 'Authorize CI for keys, if allowed'
          command: if [[ $IS_SIGNED -eq 1 ]]; then ./scripts/ci/authorize-ci-for-keys.rb; fi
      - run:
          name: 'Install certificates, if allowed'
          command: if [[ $IS_SIGNED -eq 1 ]]; then ./scripts/ci/ios/certificates.sh; fi

      - run: mkdir -p logs/

      - run:
          name: 'Discover generated products'
          command: ./scripts/ci/ios/discover-products.sh | tee ./logs/products

      - run:
          name: 'Build app for simulator testing'
          command: xcodebuild
            -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
            -configuration Release
            -destination 'platform=iOS Simulator,name=iPhone 7,OS=12.2'
            -derivedDataPath ./ios/build
            CODE_SIGNING_REQUIRED=NO
            CODE_SIGNING_ALLOWED=NO
            CODE_SIGN_IDENTITY=""
            build | xcpretty

      - run: brew tap wix/brew
      - run: brew install applesimutils
      - run:
          name: 'Run Detox tests'
          command: yarn detox test e2e --configuration ios.sim.release --cleanup

      - run:
          name: 'Build app for release [nightly/beta]'
          command: |
            if [[ $IS_BETA -eq 1 || $IS_NIGHTLY -eq 1 ]]; then
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
                -destination generic/platform=iOS
                -archivePath "$GYM_ARCHIVE_PATH"
                archive | xcpretty
            fi

      - persist_to_workspace: {root: ./ios/archive, paths: [./*]}
      - persist_to_workspace: {root: ./logs, paths: [./*]}

  ios-deploy:
    <<: *ios-base
    environment:
      <<: *ios-env
      task: IOS-deploy
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - workspace-attach-node_modules

      - set-ruby-version
      - workspace-attach-bundler

      - attach_workspace: {at: ./ios/archive}
      - attach_workspace: {at: ./logs}

      - run:
          name: '[nightly/beta] upload to Play Store'
          command: |
            if [[ $IS_BETA -eq 1 ]]; then
              EXTERNAL=true
            else if [[ $IS_NIGHTLY -eq 1 ]]; then
              EXTERNAL=false
            fi

            if [[ -n $EXTERNAL ]]; then
              bundle exec fastlane run upload_to_testflight
                --distribute_external $EXTERNAL
                --ipa $(cat ./logs/products)
            fi

      - run:
          name: '[nightly/beta] generate and upload sourcemaps'
          command: |
            if [[ $IS_BETA -eq 1 || $IS_NIGHTLY -eq 1 ]]; then
              ./scripts/ci/sourcemap-create.sh
              ./scripts/ci/sourcemap-upload.sh
            fi

      - danger

  ios-build-nightly:
    <<: *ios-build
    environment:
      <<: *ios-build-env
      IS_NIGHTLY: '1'

  ios-bundle:
    executor: node
    environment:
      task: JS-bundle-ios
    steps:
      - checkout
      - workspace-attach-node_modules
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent bundle:ios
      - store_artifacts:
          path: ./ios/AllAboutOlaf/main.jsbundle
          destination: ios.jsbundle
      - store_artifacts:
          path: ./ios/AllAboutOlaf/main.jsbundle.map
          destination: ios.jsbundle.map
      - danger
