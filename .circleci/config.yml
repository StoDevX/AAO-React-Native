---
version: 2

x-config:
  - &docker-node-8
    image: 'circleci/node:8'
  - &restore-cache-yarn
    keys:
      - 'v2-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
      - 'v2-dependencies-{{ arch }}-'
      - 'v2-dependencies-'
  - &save-cache-yarn
    key: 'v2-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
    paths:
      - ~/.cache/yarn
  - &restore-cache-bundler
    keys:
      - 'v1-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
      - 'v1-ruby-dependencies-{{ arch }}-'
      - 'v1-ruby-dependencies-'
  - &save-cache-bundler
    key: 'v1-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
    paths:
      - ./vendor/bundle
  - &restore-cache-gradle
    keys:
      - 'v1-gradle-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
      - 'v1-gradle-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-'
      - 'v1-gradle-{{ arch }}-{{ checksum "android/build.gradle" }}-'
      - 'v1-gradle-{{ arch }}-'
      - 'v1-gradle-'
  - &save-cache-gradle
    key: 'v1-gradle-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
    paths:
      - ~/.gradle
  - &restore-cache-ios-third-party
    keys:
      - 'v1-ios-rn-third-party-{{ arch }}-{{ checksum "node_modules/react-native/package.json" }}'
      - 'v1-ios-rn-third-party-{{ arch }}-'
      - 'v1-ios-rn-third-party-'
  - &save-cache-ios-third-party
    key: 'v1-ios-rn-third-party-{{ arch }}-{{ checksum "node_modules/react-native/package.json" }}'
    paths:
      - ~/.rncache
      - ./node_modules/react-native/third-party
  - &set-ruby-version
    name: Set Ruby Version
    command: echo "ruby-2.4.2" > ~/.ruby-version
  - &run-danger
    command: yarn run danger --id $task
    when: always

workflows:
  version: 2
  analyze:
    jobs:
      - cache-yarn-linux
      - danger: {requires: [cache-yarn-linux]}
      - flow: {requires: [cache-yarn-linux]}
      - jest: {requires: [cache-yarn-linux]}
      - prettier: {requires: [cache-yarn-linux]}
      - eslint: {requires: [cache-yarn-linux]}
      - data: {requires: [cache-yarn-linux]}
      - ios: {requires: [danger, flow, jest, prettier, eslint, data]}
      - android: {requires: [danger, flow, jest, prettier, eslint, data]}

jobs:
  cache-yarn-linux:
    docker: [*docker-node-8]
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - run: yarn --version
      - save_cache: *save-cache-yarn

  danger:
    docker: [*docker-node-8]
    environment: {task: JS-general}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: *run-danger

  flow:
    docker: [*docker-node-8]
    environment: {task: JS-flow}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent flow check --quiet | tee logs/flow
      - run: *run-danger

  jest:
    docker: [*docker-node-8]
    environment: {task: JS-jest}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent test --coverage 2>&1 | tee logs/jest
      - run: *run-danger
      - run: yarn global add coveralls
      - run:
          name: coveralls
          command: |
            export PATH=$PATH:$(yarn global bin)
            export COVERALLS_SERVICE_NAME=CircleCI
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_BUILD_NUM
            coveralls < ./coverage/lcov.info

  prettier:
    docker: [*docker-node-8]
    environment: {task: JS-prettier}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: mkdir -p logs/
      - run: yarn run prettier
      - run:
          name: git diff
          command: |
            touch logs/prettier  # to ensure that the file exists
            if ! git diff --quiet *.js source/ scripts/; then
              git diff *.js source/ scripts/ | tee logs/prettier
            fi
      - run: *run-danger

  eslint:
    docker: [*docker-node-8]
    environment: {task: JS-lint}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent lint | tee logs/eslint
      - run: *run-danger

  data:
    docker: [*docker-node-8]
    environment: {task: JS-data}
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - run: mkdir -p logs/
      - run: yarn run --silent validate-data --quiet | tee logs/validate-data
      - run: yarn run --silent validate-bus-data | tee logs/validate-bus-data
      - run: *run-danger

  android:
    docker: [{image: 'circleci/android:api-27-node8-alpha'}]
    environment:
      task: ANDROID
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
    steps:
      - checkout
      - run: yarn --version
      - run: *set-ruby-version
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --path ./vendor/bundle
      - save_cache: *save-cache-bundler
      # - run:
      #     command: cd android && ./gradlew androidDependencies
      #     environment: {TERM: xterm-256color}
      - run: mkdir -p logs/
      - run: touch .env.js
      - restore_cache: *restore-cache-gradle
      - run: bundle exec fastlane android ci-run | tee ./logs/build
      - save_cache: *save-cache-gradle
      - run: *run-danger

  ios:
    macos: {xcode: '9.2'}
    environment:
      task: IOS
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run: yarn --version
      - run: *set-ruby-version
      - restore_cache: *restore-cache-yarn
      - run: yarn install
      - save_cache: *save-cache-yarn
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --path ./vendor/bundle
      - save_cache: *save-cache-bundler
      - run: mkdir -p logs/
      - run: touch .env.js
      - restore_cache: *restore-cache-ios-third-party
      - run: bundle exec fastlane ios ci-run | tee ./logs/build
      - save_cache: *save-cache-ios-third-party
      - run:
          name: Analyze Fastlane Logfile
          command: python2 ./scripts/analyze-gym.py -s 20 < ./logs/build | tee ./logs/analysis || true
      - run: *run-danger
