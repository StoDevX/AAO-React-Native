---
version: 2.1

executors:
  node:
    docker:
      - image: 'circleci/node:10'
  ruby:
    docker:
      - image: 'circleci/ruby:2.5.3'
  android:
    # `cmd` key is passed to solve a weird issue (see GitHub PR's 2170 and 2173).
    # this overrides the thing and forces the container to run /bin/bash as the "command"
    # so it doesn't get confused and OOM/exhaust the build resources (don't ask me)
    docker:
      - image: 'circleci/android:api-27-node8-alpha'
        cmd: '/bin/bash'
  ios:
    macos:
      xcode: '9.4.1'

commands:
  attach-workspace--node_modules:
    steps: [{attach_workspace: {at: ./node_modules}}]
  persist-workspace--node_modules:
    steps: [{persist_to_workspace: {root: ./node_modules, paths: [./*]}}]

  coveralls:
    description: 'Upload code coverage stats to Coveralls'
    steps:
      - run:
          name: coveralls
          command: |
            export COVERALLS_SERVICE_NAME=CircleCI
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_BUILD_NUM
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              npx coveralls < ./coverage/lcov.info
            fi

  reconcile-git:
    description: "Reconcile Git histories to fix Circle's munging"
    steps:
      - run:
        name: "Reconcile Git histories"
        command: |
          git checkout master
          git reset --hard origin/master
          git checkout "$CIRCLE_BRANCH"
          git reset --hard "origin/$CIRCLE_BRANCH"

  danger:
    description: 'Run Danger'
    steps:
      - run:
          command: |
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              yarn run danger --id $task
            fi
          when: always
          environment:
            DANGER_DISABLE_TRANSPILATION: "true"

  set-ruby-version:
    steps: [{run: {name: Set Ruby Version, command: echo "ruby-2.5.3" > ~/.ruby-version}}]

  cache-save--bundler:
    steps:
      - save_cache:
          key: &bundler-cache-key 'v2-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
          paths: [./vendor/bundle]
  cache-restore--bundler: {steps: [{restore_cache: {key: *bundler-cache-key}}]}

  cache-save--yarn:
    steps:
      - save_cache:
          key: &yarn-cache-key 'v3-yarn-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
          paths: [~/.cache/yarn, ~/Library/Caches/Yarn]
  cache-restore--yarn: {steps: [{restore_cache: {key: *yarn-cache-key}}]}

  cache-save--gradle:
    steps:
      - save_cache:
          key: &gradle-cache-key 'v1-gradle-dependencies-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
          paths: [~/.gradle]
  cache-restore--gradle: {steps: [{restore_cache: {key: *gradle-cache-key}}]}

  yarn-install-and-cache:
    steps:
      - run: yarn --version
      - cache-restore--yarn
      - run: yarn install --frozen-lockfile
      - cache-save--yarn

  bundler-install-and-cache:
    steps:
      - run: bundle --version
      - run: gem --version
      - run: ruby --version
      - cache-restore--bundler
      - bundle-install
      - cache-save--bundler

  mkdir-logs: {steps: [{run: mkdir -p logs/}]}
  git-diff-to-file:
    parameters:
      file: {type: string}
    steps:
      # ensure that the folder exists
      - run: mkdir -p $(dirname << parameters.file >>)
      # ensure that the file exists
      - run: touch << parameters.file >>
      - run:
          name: git diff << parameters.file >>
          command: |
            if ! git diff --quiet --stat; then
              git diff | tee << parameters.file >>
              exit 1
            fi

  bundle-install: {steps: [{run: bundle check || bundle install --frozen --path ./vendor/bundle}]}
  yarn-bundle-data: {steps: [{run: yarn run bundle-data}]}

  yarn-flow:
    steps:
      - run: mkdir -p logs/
      - run: yarn run --silent flow check --quiet | tee logs/flow

  yarn-jest:
    environment:
      JEST_JUNIT_OUTPUT: ./test-results/jest/junit.xml
    steps:
      - run: mkdir -p logs/
      - run: mkdir -p test-results/jest/
      - run: yarn run --silent test --coverage | tee logs/jest
      - store_test_results: {path: ./test-results}

  yarn-eslint:
    steps:
      - run: mkdir -p logs/
      - run: mkdir -p test-results/eslint/
      - run: yarn run --silent lint | tee logs/eslint
      - run: yarn run --silent lint --format junit > test-results/eslint/junit.xml
      - store_test_results: {path: ./test-results}

  run-if:
    description: Run a command if the build is not doing an early exit
    parameters:
      cmd: {type: string}
    steps:
      - run:
          name: << parameters.cmd >>
          command: if [[ ./scripts/should-build.rb == 'yes' ]]; then << parameters.cmd >>; fi
          environment: << parameters.environment >>

  download-android-dependencies:
    steps:
      - cache-restore--gradle
      - run:
          name: Download Android dependencies
          command: cd android && ./gradlew androidDependencies --console=plain
          environment: {TERM: xterm-256color}
      - cache-save--gradle

  fastlane:
    parameters:
      platform: {type: string}
    environment:
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
    steps:
      - run: mkdir -p ./logs/
      - run: touch logs/build-status
      - run:
          name: Run Fastlane
          command: bundle exec fastlane << platform >> ci-run | tee ./logs/build
          environment:
            GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $CIRCLE_SHA1)

  homebrew:
    parameters:
      tap: {type: string}
      install: {type: string}
    environment:
      HOMEBREW_NO_AUTO_UPDATE: '1'
    steps:
      - when:
          condition: << parameters.tap >>
          steps: [{run: brew tap << parameters.tap >>}]
      - when:
          condition: << parameters.install >>
          steps: [{run: brew install << parameters.install >>}]

workflows:
  analyze-and-build:
    # The way this works is, Circle runs analyze-and-build on every commit
    # to every branch.
    # Fastlane checks the environment to see if it should build or deploy,
    # and if there's a tag then it deploys (otherwise it just builds.)
    # These same jobs are run by the "nightly" workflow, which has a
    # different CIRCLE_WORKFLOW_ID, which should allow us to only deploy
    # nightlies from that branch.
    jobs: &basic-jobs
      - cache-yarn-linux: &only-tags
          filters: &filters {tags: {only: /.*/}}
      - cache-bundler-linux: *only-tags
      - danger: &basic-job
          filters: *filters
          requires: [cache-yarn-linux]
      - flow: *basic-job
      - jest: *basic-job
      - yarn-dedupe: *basic-job
      - prettier: *basic-job
      - eslint: *basic-job
      - data: *basic-job
      - ios: &enhanced-job
          filters: *filters
          requires: [danger, flow, jest, prettier, eslint, data, cache-bundler-linux]
      - android: *enhanced-job
      - ios-bundle: *enhanced-job
      - android-bundle: *enhanced-job

  nightly:
    triggers:
      - schedule:
          cron: 17 8 * * *
          filters: {branches: {only: [master]}}
    jobs:
      - cache-yarn-linux
      - cache-bundler-linux
      - danger: &basic-nightly {requires: [cache-yarn-linux]}
      - flow: *basic-nightly
      - jest: *basic-nightly
      - yarn-dedupe: *basic-nightly
      - prettier: *basic-nightly
      - eslint: *basic-nightly
      - data: *basic-nightly
      - ios-nightly: &enhanced-nightly {requires: [danger, flow, jest, prettier, eslint, data, cache-bundler-linux]}
      - android-nightly: *enhanced-nightly

jobs:
  cache-yarn-linux:
    executor: node
    steps:
      - checkout
      - yarn-install-and-cache
      - persist-workspace--node_modules

  cache-bundler-linux:
    executor: ruby
    steps:
      - checkout
      - set-ruby-version
      - bundler-install-and-cache

  danger:
    executor: node
    environment:
      task: JS-general
    steps:
      - checkout
      - attach-workspace--node_modules
      - danger

  flow:
    executor: node
    environment:
      task: JS-flow
    steps:
      - checkout
      - attach-workspace--node_modules
      - yarn-bundle-data
      - yarn-flow
      - danger

  jest:
    executor: node
    environment:
      task: JS-jest
    steps:
      - checkout
      - attach-workspace--node_modules
      - yarn-bundle-data
      - yarn-jest
      - danger
      - coveralls

  prettier:
    executor: node
    environment:
      task: JS-prettier
    steps:
      - checkout
      - attach-workspace--node_modules
      - run: yarn run pretty
      - git-diff-to-file: {file: logs/prettier}
      - danger

  yarn-dedupe:
    executor: node
    environment:
      task: JS-yarn-dedupe
    steps:
      - checkout
      - attach-workspace--node_modules
      - run: yarn run d
      - git-diff-to-file: {file: logs/yarn-dedupe}
      - danger

  eslint:
    executor: node
    environment:
      task: JS-lint
    steps:
      - checkout
      - attach-workspace--node_modules
      - yarn-bundle-data
      - yarn-eslint
      - danger

  data:
    executor: node
    environment:
      task: JS-data
    steps:
      - checkout
      - attach-workspace--node_modules
      - mkdir-logs
      - run: yarn run --silent validate-data --quiet | tee logs/validate-data
      - run: yarn run --silent validate-bus-data | tee logs/validate-bus-data
      - yarn-bundle-data
      - run: yarn run compress-data
      - store_artifacts: {path: ./docs/}
      - danger

  android: &android
    executor: android
    environment: &android-env
      task: ANDROID
    steps:
      - checkout
      - reconcile-git
      - run: node --version
      - run: yarn --version
      - set-ruby-version
      - attach-workspace--node_modules
      - bundler-install-and-cache
      - download-android-dependencies
      - fastlane: {platform: android}
      - store_artifacts: {path: ./android/app/build/outputs/apk/release/}
      - danger

  android-nightly:
    <<: *android
    environment:
      <<: *android-env
      IS_NIGHTLY: '1'

  android-bundle:
    executor: node
    environment:
      task: JS-bundle-android
    steps:
      - checkout
      - attach-workspace--node_modules
      - mkdir-logs
      - yarn-bundle-data
      - run: yarn run --silent bundle:android
      - store_artifacts: {destination: android.jsbundle, path: ./android/app/src/main/assets/index.android.bundle}
      - store_artifacts: {destination: android.jsbundle.map, path: ./android/app/src/main/assets/index.android.bundle.map}
      - danger

  ios: &ios
    executor: ios
    environment: &ios-env
      task: IOS
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - reconcile-git
      - yarn-install-and-cache
      - set-ruby-version
      - bundler-install-and-cache
      - homebrew: {tap: wix/brew, install: applesimutils}
      - fastlane: {platform: ios}
      - run: yarn detox build --configuration ios.sim.release | xcpretty
      - run: yarn detox test --configuration ios.sim.release --cleanup
      - store_artifacts: {path: ./ios/build/AllAboutOlaf.app.dSYM.zip}
      - store_artifacts: {path: ./ios/build/AllAboutOlaf.ipa}
      - run:
          name: Analyze Fastlane Logfile
          command: python2 ./scripts/analyze-gym.py -s 20 < ./logs/build | tee ./logs/analysis || true
      - danger

  ios-nightly:
    <<: *ios
    environment:
      <<: *ios-env
      IS_NIGHTLY: '1'

  ios-bundle:
    executor: node
    environment:
      task: JS-bundle-ios
    steps:
      - checkout
      - attach-workspace--node_modules
      - mkdir-logs
      - yarn-bundle-data
      - run: yarn run --silent bundle:ios
      - store_artifacts: {destination: ios.jsbundle, path: ./ios/AllAboutOlaf/main.jsbundle}
      - store_artifacts: {destination: ios.jsbundle.map, path: ./ios/AllAboutOlaf/main.jsbundle.map}
      - danger
