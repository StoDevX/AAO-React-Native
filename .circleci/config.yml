---
version: 2

x-config:
  x-images:
    - &docker-node
      - image: 'circleci/node:10'
    - &docker-ruby
      - image: 'circleci/ruby:2.5.3'
  x-caching:  # caching instructions
    - &save-cache-yarn
      key: 'v3-yarn-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
      paths: [~/.cache/yarn, ~/Library/Caches/Yarn]
    - &restore-cache-yarn
      key: 'v3-yarn-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
    - &save-cache-bundler
      key: 'v2-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
      paths: [./vendor/bundle]
    - &restore-cache-bundler
      key: 'v2-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
    - &save-cache-gradle
      key: 'v1-gradle-dependencies-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
      paths: [~/.gradle]
    - &restore-cache-gradle
      key: 'v1-gradle-dependencies-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
  x-workspace:
    - &persist-workspace-node_modules
      root: ./node_modules
      paths: [./*]
    - &attach-workspace-node_modules
      at: ./node_modules
  x-commands:  # command shorthands
    - &set-ruby-version
      name: Set Ruby Version
      command: echo "ruby-2.5.3" > ~/.ruby-version
    - &run-danger
      command: |
        if ! [[ $CIRCLE_PR_NUMBER ]]; then
          yarn run danger --id $task
        fi
      when: always
      environment:
        DANGER_DISABLE_TRANSPILATION: "true"
    - &embed-env-vars
      name: Embed environment variables into the app
      command: |
        touch .env.js

workflows:
  version: 2
  analyze-and-build:
    # The way this works is, Circle runs analyze-and-build on every commit
    # to every branch.
    # Fastlane checks the environment to see if it should build or deploy,
    # and if there's a tag then it deploys (otherwise it just builds.)
    # These same jobs are run by the "nightly" workflow, which has a
    # different CIRCLE_WORKFLOW_ID, which should allow us to only deploy
    # nightlies from that branch.
    jobs: &basic-jobs
      - cache-yarn-linux:
          filters: &filters {tags: {only: /.*/}}
      - cache-bundler-linux:
          filters: &filters {tags: {only: /.*/}}
      - danger:
          filters: *filters
          requires: [cache-yarn-linux]
      - flow:
          filters: *filters
          requires: [cache-yarn-linux]
      - jest:
          filters: *filters
          requires: [cache-yarn-linux]
      - yarn-dedupe:
          filters: *filters
          requires: [cache-yarn-linux]
      - prettier:
          filters: *filters
          requires: [cache-yarn-linux]
      - eslint:
          filters: *filters
          requires: [cache-yarn-linux]
      - data:
          filters: *filters
          requires: [cache-yarn-linux]
      - ios:
          filters: *filters
          requires: [danger, flow, jest, prettier, eslint, data]
      - android:
          filters: *filters
          requires: [danger, flow, jest, prettier, eslint, data, cache-bundler-linux]
      - ios-bundle:
          filters: *filters
          requires: [danger, flow, jest, prettier, eslint, data]
      - android-bundle:
          filters: *filters
          requires: [danger, flow, jest, prettier, eslint, data]
  nightly:
    triggers:
      - schedule:
          cron: 17 8 * * *
          filters: {branches: {only: [master]}}
    jobs:
      - cache-yarn-linux
      - cache-bundler-linux
      - danger: {requires: [cache-yarn-linux]}
      - flow: {requires: [cache-yarn-linux]}
      - jest: {requires: [cache-yarn-linux]}
      - yarn-dedupe: {requires: [cache-yarn-linux]}
      - prettier: {requires: [cache-yarn-linux]}
      - eslint: {requires: [cache-yarn-linux]}
      - data: {requires: [cache-yarn-linux]}
      - ios-nightly: {requires: [danger, flow, jest, prettier, eslint, data]}
      - android-nightly: {requires: [danger, flow, jest, prettier, eslint, data, cache-bundler-linux]}

jobs:
  cache-yarn-linux:
    docker: *docker-node
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install --frozen-lockfile
      - run: yarn --version
      - save_cache: *save-cache-yarn
      - persist_to_workspace: *persist-workspace-node_modules

  cache-bundler-linux:
    docker: *docker-ruby
    steps:
      - checkout
      - run: *set-ruby-version
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --frozen --path ./vendor/bundle
      - run: bundle --version
      - run: gem --version
      - run: ruby --version
      - save_cache: *save-cache-bundler

  danger:
    docker: *docker-node
    environment:
      task: JS-general
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: *run-danger

  flow:
    docker: *docker-node
    environment:
      task: JS-flow
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: yarn run bundle-data
      - run: yarn run --silent flow check --quiet | tee logs/flow
      - run: *run-danger

  jest:
    docker: *docker-node
    environment:
      task: JS-jest
      JEST_JUNIT_OUTPUT: ./test-results/jest/junit.xml
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/ test-results/jest/
      - run: yarn run bundle-data
      - run: yarn run --silent test --coverage | tee logs/jest
      - run: *run-danger
      - store_test_results:
          path: ./test-results
      - run: yarn global add coveralls
      - run:
          name: coveralls
          command: |
            export PATH=$PATH:$(yarn global bin)
            export COVERALLS_SERVICE_NAME=CircleCI
            export COVERALLS_SERVICE_JOB_ID=$CIRCLE_BUILD_NUM
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              coveralls < ./coverage/lcov.info
            fi

  prettier:
    docker: *docker-node
    environment:
      task: JS-prettier
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: yarn run pretty
      - run:
          name: git diff
          command: |
            touch logs/prettier  # to ensure that the file exists
            if ! git diff --quiet --stat; then
              git diff | tee logs/prettier
              exit 1
            fi
      - run: *run-danger

  yarn-dedupe:
    docker: *docker-node
    environment:
      task: JS-yarn-dedupe
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: yarn run d
      - run:
          name: git diff
          command: |
            touch logs/yarn-dedupe
            if ! git diff --quiet --stat; then
              git diff | tee logs/yarn-dedupe
              exit 1
            fi
      - run: *run-danger

  eslint:
    docker: *docker-node
    environment:
      task: JS-lint
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/ test-results/eslint/
      - run: yarn run bundle-data
      - run: yarn run --silent lint | tee logs/eslint
      - run: yarn run --silent lint --format junit > test-results/eslint/junit.xml
      - run: *run-danger
      - store_test_results:
          path: ./test-results

  data:
    docker: *docker-node
    environment:
      task: JS-data
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: yarn run --silent validate-data --quiet | tee logs/validate-data
      - run: yarn run --silent validate-bus-data | tee logs/validate-bus-data
      - run: yarn run bundle-data
      - run: yarn run compress-data
      - store_artifacts:
          path: ./docs/
      - run: *run-danger

  android: &android
    # cmd: key is passed to solve a weird issue (see GitHub PR's 2170 and 2173).
    # this overrides the thing and forces the container to run /bin/bash as the "command"
    # so it doesn't get confused and OOM/exhaust the build resources (don't ask me)
    docker: [{image: 'circleci/android:api-28-node8-alpha', cmd: '/bin/bash'}]
    environment: &android-env
      task: ANDROID
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
    steps:
      - checkout
      - run:
          name: "Reconcile Git histories"
          command: |
            git checkout master
            git reset --hard origin/master
            git checkout "$CIRCLE_BRANCH"
            git reset --hard "origin/$CIRCLE_BRANCH"
      - run: mkdir -p logs/
      - run: touch logs/build-status
      - run:
          name: Skip build if possible
          command: scripts/should-build || circleci step halt
      - run: node --version
      - run: yarn --version
      - run: *set-ruby-version
      - attach_workspace: *attach-workspace-node_modules
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --frozen --path ./vendor/bundle
      - restore_cache: *restore-cache-gradle
      - run:
          name: Download Android dependencies
          command: cd android && ./gradlew androidDependencies --console=plain
          environment: {TERM: xterm-256color}
      - save_cache: *save-cache-gradle
      - run: *embed-env-vars
      - run:
          name: Run Fastlane
          command: bundle exec fastlane android ci-run | tee ./logs/build
          environment:
            GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $CIRCLE_SHA1)
      - store_artifacts:
          path: ./android/app/build/outputs/apk/release/
      - run: *run-danger

  android-nightly:
    <<: *android
    environment:
      <<: *android-env
      IS_NIGHTLY: '1'

  android-bundle:
    docker: *docker-node
    environment:
      task: JS-bundle-android
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: *embed-env-vars
      - run: yarn run bundle-data
      - run: yarn run --silent bundle:android
      - store_artifacts:
          path: ./android/app/src/main/assets/index.android.bundle
          destination: android.jsbundle
      - store_artifacts:
          path: ./android/app/src/main/assets/index.android.bundle.map
          destination: android.jsbundle.map
      - run: *run-danger

  ios: &ios
    macos: {xcode: '9.4.1'}
    environment: &ios-env
      task: IOS
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
      HOMEBREW_NO_AUTO_UPDATE: 1
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - run:
          name: "Reconcile Git histories"
          command: |
            git checkout master
            git reset --hard origin/master
            git checkout "$CIRCLE_BRANCH"
            git reset --hard "origin/$CIRCLE_BRANCH"
      - run: mkdir -p logs/
      - run: touch logs/build-status
      - run:
          name: Skip build if possible
          command: scripts/should-build || circleci step halt
      - run: yarn --version
      - run: *set-ruby-version
      - restore_cache: *restore-cache-yarn
      - run: yarn install --frozen-lockfile
      - save_cache: *save-cache-yarn
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --frozen --path ./vendor/bundle
      - save_cache: *save-cache-bundler
      - run: brew tap wix/brew
      - run: brew install applesimutils
      - run: *embed-env-vars
      - run:
          name: Run Fastlane
          command: bundle exec fastlane ios ci-run | tee ./logs/build
          environment:
            GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $CIRCLE_SHA1)
      - run: yarn detox build --configuration ios.sim.release | xcpretty
      - run: yarn detox test --configuration ios.sim.release --cleanup
      - store_artifacts: {path: ./ios/build/AllAboutOlaf.app.dSYM.zip}
      - store_artifacts: {path: ./ios/build/AllAboutOlaf.ipa}
      - run:
          name: Analyze Fastlane Logfile
          command: python2 ./scripts/analyze-gym.py -s 20 < ./logs/build | tee ./logs/analysis || true
      - run: *run-danger

  ios-nightly:
    <<: *ios
    environment:
      <<: *ios-env
      IS_NIGHTLY: '1'

  ios-bundle:
    docker: *docker-node
    environment:
      task: JS-bundle-ios
    steps:
      - checkout
      - attach_workspace: *attach-workspace-node_modules
      - run: mkdir -p logs/
      - run: *embed-env-vars
      - run: yarn run bundle-data
      - run: yarn run --silent bundle:ios
      - store_artifacts:
          path: ./ios/AllAboutOlaf/main.jsbundle
          destination: ios.jsbundle
      - store_artifacts:
          path: ./ios/AllAboutOlaf/main.jsbundle.map
          destination: ios.jsbundle.map
      - run: *run-danger
