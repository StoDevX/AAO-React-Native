---
version: 2

x-config:
  x-images:
    - &docker-node
      - image: 'circleci/node:10'
    - &docker-ruby
      - image: 'circleci/ruby:2.5.3'
  x-caching:  # caching instructions
    - &save-cache-yarn
      key: 'v3-yarn-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
      paths: [~/.cache/yarn, ~/Library/Caches/Yarn]
    - &restore-cache-yarn
      key: 'v3-yarn-dependencies-{{ arch }}-{{ checksum "yarn.lock" }}'
    - &save-cache-bundler
      key: 'v2-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
      paths: [./vendor/bundle]
    - &restore-cache-bundler
      key: 'v2-ruby-dependencies-{{ arch }}-{{ checksum "Gemfile.lock" }}'
    - &save-cache-gradle
      key: 'v1-gradle-dependencies-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
      paths: [~/.gradle]
    - &restore-cache-gradle
      key: 'v1-gradle-dependencies-{{ arch }}-{{ checksum "android/build.gradle" }}-{{ checksum "android/app/build.gradle" }}-{{ checksum "node_modules/react-native/package.json" }}'
  x-workspace:
    - &persist-workspace-node_modules
      root: ./node_modules
      paths: [./*]
    - &attach-workspace-node_modules
      at: ./node_modules
  x-commands:  # command shorthands
    - &set-ruby-version
      name: Set Ruby Version
      command: echo "ruby-2.5.3" > ~/.ruby-version
    - &run-danger
      command: |
        if ! [[ $CIRCLE_PR_NUMBER ]]; then
          yarn run danger --id $task
        fi
      when: always
      environment:
        DANGER_DISABLE_TRANSPILATION: "true"
    - &embed-env-vars
      name: Embed environment variables into the app
      command: |
        touch .env.js

workflows:
  version: 2
  analyze-and-build:
    # The way this works is, Circle runs analyze-and-build on every commit
    # to every branch.
    # Fastlane checks the environment to see if it should build or deploy,
    # and if there's a tag then it deploys (otherwise it just builds.)
    # These same jobs are run by the "nightly" workflow, which has a
    # different CIRCLE_WORKFLOW_ID, which should allow us to only deploy
    # nightlies from that branch.
    jobs: &basic-jobs
      - cache-yarn-linux:
          filters: &filters {tags: {only: /.*/}}
      - cache-bundler-linux:
          filters: &filters {tags: {only: /.*/}}
      - android:
          filters: *filters
          requires: [cache-yarn-linux, cache-bundler-linux]

jobs:
  cache-yarn-linux:
    docker: *docker-node
    steps:
      - checkout
      - restore_cache: *restore-cache-yarn
      - run: yarn install --frozen-lockfile
      - run: yarn --version
      - save_cache: *save-cache-yarn
      - persist_to_workspace: *persist-workspace-node_modules

  cache-bundler-linux:
    docker: *docker-ruby
    steps:
      - checkout
      - run: *set-ruby-version
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --frozen --path ./vendor/bundle
      - run: bundle --version
      - run: gem --version
      - run: ruby --version
      - save_cache: *save-cache-bundler

  android: &android
    # cmd: key is passed to solve a weird issue (see GitHub PR's 2170 and 2173).
    # this overrides the thing and forces the container to run /bin/bash as the "command"
    # so it doesn't get confused and OOM/exhaust the build resources (don't ask me)
    docker: [{image: 'circleci/android:api-27-node8-alpha', command: '/bin/bash'}]
    environment: &android-env
      task: ANDROID
      FASTLANE_SKIP_UPDATE_CHECK: '1'
      FASTLANE_DISABLE_ANIMATION: '1'
    steps:
      - checkout
      - run:
          name: "Reconcile Git histories"
          command: |
            git checkout master
            git reset --hard origin/master
            git checkout "$CIRCLE_BRANCH"
            git reset --hard "origin/$CIRCLE_BRANCH"
      - run: 
          name: Skip build if possible
          command: exit 1 || circleci step halt
      - run: node --version
      - run: yarn --version
      - run: *set-ruby-version
      - attach_workspace: *attach-workspace-node_modules
      - restore_cache: *restore-cache-bundler
      - run: bundle check || bundle install --frozen --path ./vendor/bundle
      - restore_cache: *restore-cache-gradle
      - run:
          name: Download Android dependencies
          command: cd android && ./gradlew androidDependencies --console=plain
          environment: {TERM: xterm-256color}
      - save_cache: *save-cache-gradle
      - run: mkdir -p logs/
      - run: touch logs/build-status
      - run: *embed-env-vars
      - run:
          name: Run Fastlane
          command: bundle exec fastlane android ci-run | tee ./logs/build
          environment:
            GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $CIRCLE_SHA1)
      - store_artifacts:
          path: ./android/app/build/outputs/apk/release/
      - run: *run-danger
