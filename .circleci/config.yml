---
version: 2.1

executors:
  node: {docker: [{image: 'circleci/node:10'}]}

  ruby: {docker: [{image: 'circleci/ruby:2.5.5'}]}

  # we pass the `command:` key to solve a weird issue (see GitHub PRs 2170 and
  # 2173). this overrides the thing and forces the container to run /bin/bash
  # as the "command" so it doesn't get confused and OOM/exhaust the build
  # resources (I have no better explanations.)
  android:
    docker: [{image: 'circleci/android:api-28-node', command: '/bin/bash'}]
    environment:
      GRADLE_USER_HOME: &gradle-home ~/.gradle
      SENTRY_PROPERTIES: ../android/sentry.properties

  ios:
    macos: {xcode: '10.2.1'}
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      SENTRY_PROPERTIES: '../ios/sentry.properties'

x-environment: &x-environment
  FL_NO_UPDATE: '1'
  FASTLANE_SKIP_UPDATE_CHECK: '1'
  FASTLANE_DISABLE_ANIMATION: '1'
  FASTLANE_DISABLE_COLORS: '1'
  HOMEBREW_NO_AUTO_UPDATE: '1'

  # The bundle identifier of your app
  APP_IDENTIFIER: &app-id 'NFMTHAZVS9.com.drewvolz.stolaf'

  # Your Apple email address
  APPLE_ID: 'aao_bot@fastmail.fm'
  APPLE_DEV_PORTAL_ID: 'hawkrives@gmail.com'

  # Your Apple Developer Team ID, if you are in multiple teams
  TEAM_ID: &team-id 'TMK6S7TPX2'
  ITC_TEAM_ID: '118781268'
  PILOT_ITC_PROVIDER: *team-id

  # This is a private key. It is not included in the repository.
  # Contact allaboutolaf@stolaf.edu or another admin if you need access.
  JSON_KEY_FILE: './fastlane/play-private-key.json'
  PACKAGE_NAME: 'com.allaboutolaf'

  # set up global info for `gym`
  GYM_PROJECT: './ios/AllAboutOlaf.xcodeproj'
  IOS_INFO_PLIST: './ios/AllAboutOlaf/Info.plist'
  GYM_SCHEME: 'AllAboutOlaf'
  GYM_OUTPUT_DIRECTORY: './ios/build'
  GYM_OUTPUT_NAME: 'AllAboutOlaf'
  GYM_ARCHIVE_PATH: './ios/archive/app.xcarchive'

  GRADLE_FILE: './android/app/build.gradle'
  KEYSTORE_FILE: './android/app/upload-keystore.properties'

  # set up other global shared values
  PRETTY_APP_NAME: 'All About Olaf'
  ONESIGNAL_APP_NAME: 'All About Olaf'
  ONESIGNAL_APP_ID: 'a46c6f2f-a240-4908-a359-801911e9b9ea'
  APPLE_APP_ID: *app-id
  APPLE_APP_NAME: 'All About Olaf'
  APPLE_PUSH_EXTENSION_ID: 'NFMTHAZVS9.com.drewvolz.stolaf.onesignal-notification-service-extension'
  APPLE_PUSH_EXTENSION_NAME: 'All About Olaf OneSignal Notification Service Extension'

  BUNDLER_CACHE_DIR: &bundler-cache-path './.bundle'
  YARN_CACHE_DIR: &yarn-cache-path '~/.yarn'
  GRADLE_USER_HOME: &gradle-user-home '~/.gradle'

commands:
  bundler-cache:
    description: 'Save the Bundler cache'
    steps:
      - save_cache:
          key: &bundler-cache-key >-
            v5-ruby-dependencies
            {{ arch }}
            {{ checksum "Gemfile.lock" }}
          paths: [*bundler-cache-path]
          name: 'Cache Bundler'

  bundler-restore:
    description: 'Restore the Bundler cache'
    steps:
      - restore_cache:
          key: *bundler-cache-key
          name: 'Restore the Bundler cache'

  gradle-cache:
    description: 'Save the Gradle cache'
    steps:
      - save_cache:
          key: &gradle-cache-key >-
            v3-gradle-dependencies
            {{ arch }}
            {{ checksum "android/gradle/wrapper/gradle-wrapper.properties" }}
            {{ checksum "android/build.gradle" }}
            {{ checksum "android/settings.gradle" }}
            {{ checksum "android/app/build.gradle" }}
            {{ checksum "node_modules/react-native/package.json" }}
          paths: [*gradle-user-home, './android/gradle/wrapper/gradle-wrapper.jar']
          name: 'Cache Gradle'

  gradle-restore:
    description: 'Restore the Gradle cache'
    steps:
      - restore_cache:
          key: *gradle-cache-key
          name: 'Restore the Gradle cache'

  yarn-cache:
    description: 'Save the Yarn cache'
    steps:
      - save_cache:
          key: &yarn-cache-key >-
            v6-yarn-dependencies
            {{ arch }}
            {{ checksum "yarn.lock" }}
          paths: [*yarn-cache-path, ./node_modules]
          name: 'Cache Yarn'

  yarn-restore:
    description: 'Restore the Yarn cache'
    steps:
      - restore_cache:
          key: *yarn-cache-key
          name: 'Restore the Yarn cache'

  logs-cache:
    description: 'cache the ./logs folder'
    steps:
      - save_cache:
          key: &logs-cache-key >-
            v1-logs
            {{ arch }}
            {{ epoch }}
          paths: [./logs]
          name: 'cache ./logs'

  logs-restore:
    description: 'Restore the logs'
    steps:
      - restore_cache:
          key: *logs-cache-key
          name: 'restore ./logs'

  set-ruby-version:
    description: 'Set the Ruby Version'
    steps:
      - run:
          name: 'Set Ruby version'
          command: echo "ruby-2.5.5" > ~/.ruby-version
      - run: ruby --version
      - run: gem --version

  danger:
    description: 'Run Danger'
    steps:
      - run:
          name: "danger"
          command: |
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              yarn run danger --id $task;
            fi
          when: always
          environment:
            DANGER_DISABLE_TRANSPILATION: 'true'

  reconcile-git-history:
    description: "Fix CircleCI's git history"
    steps:
      - run:
          name: 'Reconcile Git histories'
          command: |
            if [ -z "$CIRCLE_TAG" ];
            then
              git checkout master
              git reset --hard origin/master
              git checkout "$CIRCLE_BRANCH"
              git reset --hard "origin/$CIRCLE_BRANCH"
            else
              echo "CIRCLE_TAG was set, didn't do anything"
            fi

  yarn-install:
    steps:
      - run: yarn --version
      - run: ls "$YARN_CACHE_DIR" || true
      - run: ls ~/.cache/yarn || true
      - run: ls ~/Library/Caches/Yarn || true
      - run:
          name: 'yarn install'
          command: yarn install --verbose
            --frozen-lockfile
            --prefer-offline
            --cache-folder "$YARN_CACHE_DIR"
      - run: ls ~/.cache/yarn || true
      - run: ls ~/Library/Caches/Yarn || true
      - run: ls "$YARN_CACHE_DIR" || true

  bundler-install:
    steps:
      - run: gem install bundler
      - run: bundle --version
      - run:
          name: 'bundle install'
          command: bundle install --frozen --path "$BUNDLER_CACHE_DIR"

  skip-if-possible:
    description: "Skip the build, if possible"
    steps:
      - run:
          name: Skip build if possible
          command: ./scripts/ci/should-skip-build && circleci step halt || echo "Build continuing."

  coveralls:
    description: 'Run Coveralls'
    steps:
      - run:
          name: coveralls
          command: |
            export COVERALLS_SERVICE_NAME="CircleCI"
            export COVERALLS_SERVICE_JOB_ID="$CIRCLE_BUILD_NUM"
            if ! [[ $CIRCLE_PR_NUMBER ]]; then
              npx coveralls < ./coverage/lcov.info
            fi

x-tag-filters: &filters {tags: {only: /.*/}}

workflows:
  version: 2
  analyze-and-build:
    jobs: &basic-jobs
      - ios-prepare: {filters: *filters}
      - android: {filters: *filters}

jobs:
  android: &android
    executor: android
    environment: &android-env
      <<: *x-environment
      task: ANDROID
    steps:
      - checkout
      - skip-if-possible

      - yarn-restore
      - yarn-install
      - yarn-cache

      - set-ruby-version
      - bundler-restore
      - bundler-install
      - bundler-cache

      - gradle-restore
      - run: cd android && ./gradlew --version
      - run:
          name: Download Android dependencies
          command: cd android && ./gradlew androidDependencies --console=plain
          environment:
            TERM: xterm-256color
      - gradle-cache

      - run:
          name: 'Restrict Gradle parallelization'
          command: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties
      - run:
          name: 'Propagate app version into build files'
          command: bundle exec ./scripts/ci/propagate-version.rb
      - run:
          name: 'Authorize CI for keys, if allowed'
          command: if ./scripts/ci/is-signed.sh; then bundle exec ./scripts/ci/authorize-ci-for-keys.rb; fi
      - run:
          name: 'Install certificates, if allowed'
          command: if ./scripts/ci/is-signed.sh; then ./scripts/ci/android/certificates.sh; fi

      - run: mkdir -p logs/

      - run:
          name: 'Build app'
          command: |
            cd ./android && ./gradlew bundleRelease && cd -
            echo $? > logs/build-status

      - run:
          name: 'Discover generated products'
          command: ./scripts/ci/android/discover-products.sh | tee ./logs/products

      #
      # eventually, implement detox for android
      #

      - run:
          name: '[nightly/beta] upload to Play Store'
          command: |
            if ./scripts/ci/is-beta.sh; then
              TRACK=beta
            else if ./scripts/ci/is-nightly.sh; then
              TRACK=alpha
            fi

            if [[ -n $TRACK ]]; then
              bundle exec fastlane run upload_to_play_store
                --aab "$(paste -sd ',' < ./logs/products)"
                --check_superseded_tracks true
                --track "$TRACK"
            fi

      - run:
          name: '[nightly/beta] generate and upload sourcemaps'
          command: |
            if [[ ./scripts/ci/is-nightly.sh || ./scripts/ci/is-beta.sh ]]; then
              ./scripts/ci/sourcemap-create.sh
              ./scripts/ci/sourcemap-upload.sh
            fi

      - danger

  ios-prepare: &ios
    executor: ios
    environment: &ios-env
      <<: *x-environment
      task: IOS
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - reconcile-git-history
      - skip-if-possible

      - yarn-restore
      - yarn-install
      - yarn-cache

      - set-ruby-version
      - bundler-restore
      - bundler-install
      - bundler-cache

      - run:
          name: 'Show Xcode build settings'
          command: |
            if [[ ./scripts/ci/is-nightly.sh || ./scripts/ci/is-beta.sh ]]; then
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings
            else
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings -derivedDataPath ./ios/build
            fi

      - run:
          name: 'Propagate app version into build files'
          command: bundle exec ./scripts/ci/propagate-version.rb
      - run:
          name: 'Authorize CI for keys, if allowed'
          command: if ./scripts/ci/is-signed.sh; then bundle exec ./scripts/ci/authorize-ci-for-keys.rb; fi
      - run:
          name: 'Install certificates, if allowed'
          command: if ./scripts/ci/is-signed.sh; then ./scripts/ci/ios/certificates.sh 'appstore'; fi

      - run: mkdir -p logs/

      - run:
          name: 'Discover generated products'
          command: ./scripts/ci/ios/discover-products.sh | tee ./logs/products

      - run:
          name: 'Build app for simulator testing'
          command: xcodebuild
            -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
            -configuration Release
            -destination 'platform=iOS Simulator,name=iPhone 7,OS=12.2'
            -derivedDataPath ./ios/build
            CODE_SIGNING_REQUIRED=NO
            CODE_SIGNING_ALLOWED=NO
            CODE_SIGN_IDENTITY=""
            build | xcpretty

      - run: brew tap wix/brew
      - run: brew install applesimutils
      - run:
          name: 'Run Detox tests'
          command: yarn detox test e2e --configuration ios.sim.release --cleanup

      - run:
          name: 'Build app for release [nightly/beta]'
          command: |
            if [[ ./scripts/ci/is-nightly.sh || ./scripts/ci/is-beta.sh ]]; then
              xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
                -destination generic/platform=iOS
                -archivePath "$GYM_ARCHIVE_PATH"
                archive | xcpretty
            fi

      - run:
          name: '[nightly/beta] upload to Play Store'
          command: |
            if ./scripts/ci/is-beta.sh; then
              EXTERNAL=true
            else if ./scripts/ci/is-nightly.sh; then
              EXTERNAL=false
            fi

            if [[ -n $EXTERNAL ]]; then
              bundle exec fastlane run upload_to_testflight
                --distribute_external $EXTERNAL
                --ipa $(cat ./logs/products)
            fi

      - run:
          name: '[nightly/beta] generate and upload sourcemaps'
          command: |
            if [[ ./scripts/ci/is-nightly.sh || ./scripts/ci/is-beta.sh ]]; then
              ./scripts/ci/sourcemap-create.sh
              ./scripts/ci/sourcemap-upload.sh
            fi

      - danger

  android-nightly:
    <<: *android
    environment:
      <<: *android-env
      IS_NIGHTLY: '1'

  ios-nightly:
    <<: *ios
    environment:
      <<: *ios-env
      IS_NIGHTLY: '1'
