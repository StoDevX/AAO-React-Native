// flow-typed signature: 768314abdaaf874222831e76fc320814
// flow-typed version: <<STUB>>/react-async_v5.1.2/flow_v0.92.1

/**
 * This is an autogenerated libdef stub for:
 *
 *   'react-async'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module 'react-async' {
	import type {Node} from 'react'
  import typeof * as React from 'react'

	declare export type AsyncChildren<T> =
		| ((state: AsyncState<T>) => Node)
		| Node
	declare export type PromiseFn<T> = (
		props: Object,
		controller: AbortController,
	) => Promise<T>
	declare export type DeferFn<T> = (
		args: any[],
		props: Object,
		controller: AbortController,
	) => Promise<T>

	declare export interface AsyncOptions<T> {
		promise?: Promise<T>;
		promiseFn?: PromiseFn<T>;
		deferFn?: DeferFn<T>;
		watch?: any;
		watchFn?: (props: Object, prevProps: Object) => any;
		initialValue?: T;
		onResolve?: (data: T) => void;
		onReject?: (error: Error) => void;
		// [prop: string]: any;
	}

	declare export interface AsyncProps<T> extends AsyncOptions<T> {
		children?: AsyncChildren<T>;
	}

	declare export interface AsyncState<T> {
		data?: T;
		error?: Error;
		initialValue?: T;
		isLoading: boolean;
		startedAt?: Date;
		finishedAt?: Date;
		counter: number;
		cancel: () => void;
		run: (...args: any[]) => Promise<T>;
		reload: () => void;
		setData: (data: T, callback?: () => void) => T;
		setError: (error: Error, callback?: () => void) => Error;
	}

	declare export function useAsync<T>(
		arg1: AsyncOptions<T> | PromiseFn<T>,
		arg2?: AsyncOptions<T>,
	): AsyncState<T>

	declare export interface FetchOptions<T> extends AsyncOptions<T> {
		defer?: boolean;
		json?: boolean;
	}

	declare export function useFetch<T>(
		input: window.RequestInfo,
		init?: window.RequestInit,
		options?: FetchOptions<T>,
	): AsyncState<T>
}
