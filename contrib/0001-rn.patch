diff --git node_modules/@callstack/react-theme-provider/typings/index.d.ts node_modules/@callstack/react-theme-provider/typings/index.d.ts
index c209bec..228fb92 100644
--- node_modules/@callstack/react-theme-provider/typings/index.d.ts
+++ node_modules/@callstack/react-theme-provider/typings/index.d.ts
@@ -8,7 +8,7 @@ type $Without<T, K extends keyof any> = T extends any ? Pick<T, Exclude<keyof T,
 type $DeepPartial<T> = { [P in keyof T]?: $DeepPartial<T[P]> };

 export type ThemingType<Theme> = {
-  ThemeProvider: React.ComponentType<{ theme?: Theme }>;
+  ThemeProvider: React.ComponentType<React.PropsWithChildren<{ theme?: Theme }>>;
   withTheme: <Props extends { theme: Theme }, C>(
     WrappedComponent: React.ComponentType<Props> & C
   ) => React.ComponentType<

diff --git node_modules/react-native/Libraries/Blob/FileReader.js node_modules/react-native/Libraries/Blob/FileReader.js
index 57b3093..0720094 100644
--- node_modules/react-native/Libraries/Blob/FileReader.js
+++ node_modules/react-native/Libraries/Blob/FileReader.js
@@ -9,7 +9,7 @@
  */
 
 import type Blob from './Blob';
-
+import {toByteArray} from 'base64-js';
 import NativeFileReaderModule from './NativeFileReaderModule';
 
 const EventTarget = require('event-target-shim');
@@ -74,8 +74,35 @@ class FileReader extends (EventTarget(...READER_EVENTS): any) {
     }
   }
 
-  readAsArrayBuffer(): any {
-    throw new Error('FileReader.readAsArrayBuffer is not implemented');
+  readAsArrayBuffer(blob: ?Blob) {
+    this._aborted = false;
+
+    if (blob == null) {
+      throw new TypeError(
+        "Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'",
+      );
+    }
+
+    NativeFileReaderModule.readAsDataURL(blob.data).then(
+      (text: string) => {
+        if (this._aborted) {
+          return;
+        }
+
+        const base64 = text.split(',')[1];
+        const typedArray = toByteArray(base64);
+
+        this._result = typedArray.buffer;
+        this._setReadyState(DONE);
+      },
+      error => {
+        if (this._aborted) {
+          return;
+        }
+        this._error = error;
+        this._setReadyState(DONE);
+      },
+    );
   }

   readAsDataURL(blob: ?Blob): void {
