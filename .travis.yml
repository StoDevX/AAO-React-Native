language: generic

before_cache:
  - rm -f "$HOME/.gradle/caches/modules-2/modules-2.lock"
  - rm -rf "$TMPDIR/jest_preprocess_cache"

cache:
  bundler: true
  directories:
    - $HOME/.gradle

env:
  global:
    # `match` keychain info â€“ the values don't matter, they're defined
    # here so they're consistent throughout
    MATCH_KEYCHAIN_NAME: travis-ios-keychain
    MATCH_KEYCHAIN_PASSWORD: alpine
    # this just gives us a nice label to use
    ENCRYPTION_LABEL: 199c454344e1

matrix:
  fast_finish: true
  include:
    - os: linux
      dist: trusty
      sudo: false
      language: node_js
      node_js: '7'
      env: {js: true}

    # - os: linux
    #   dist: precise
    #   sudo: required
    #   language: android
    #   jdk: oraclejdk8
    #   env: [android=true, can_deploy=true]
    #   android:
    #     components:
    #       - tools
    #       - platform-tools
    #       - build-tools-23.0.1
    #       - build-tools-23.0.2
    #       - build-tools-25.0.2
    #       - android-23
    #       - android-25
    #       - extra-android-m2repository
    #       - extra-google-m2repository
    #       - extra-android-support

    # - os: linux
    #   dist: precise
    #   sudo: required
    #   language: android
    #   jdk: oraclejdk8
    #   env: [android=true, emulator=true]
    #   android:
    #     components:
    #       - tools
    #       - platform-tools
    #       - build-tools-23.0.1
    #       - android-23
    #       - extra-android-m2repository
    #       - extra-google-m2repository
    #       - extra-android-support
    #       - sys-img-armeabi-v7a-google_apis-23

    # - os: osx
    #   language: objective-c
    #   osx_image: xcode8.1
    #   node_js: '7'
    #   env: [ios=true, can_deploy=true]


# As seen in http://stackoverflow.com/a/31882307/2347774
# Prevent travis from building twice for PRs
branches:
  only:
    - master
    - /^travis/


before_install:
  - echo "Now testing $type on $TRAVIS_OS_NAME"
  - echo "Using the android emulator? $emulator"
  - echo "Travis branch is $TRAVIS_BRANCH"
  - echo "Travis is in pull request $TRAVIS_PULL_REQUEST"
  - echo "Build triggered by $TRAVIS_EVENT_TYPE"

  # get a single branch var for both pushes and PRs
  - export BRANCH=${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}
  - export REPO=$(git config remote.origin.url)
  - export SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}

  # ensure that the PR branch exists locally
  - git config --add remote.origin.fetch "+refs/heads/$BRANCH:refs/remotes/origin/$BRANCH"
  - git fetch --depth 10
  - git branch "$BRANCH"

  # only deploy from the once-daily cron-triggered jobs
  - run_deploy=0
  - if [[ $can_deploy && $TRAVIS_EVENT_TYPE == "cron" ]]; then run_deploy=1; fi
  - export run_deploy=$run_deploy

  # force node 7 on the android builds
  - |
    if [[ $android ]]; then
      set -x
      nvm install 7
      nvm use 7
      set +x
    fi

  # turn off fancy npm stuff
  - npm config set spin=false
  - npm config set progress=false

  # Dirty hack for https://github.com/travis-ci/travis-ci/issues/5092
  - echo $PATH
  - PATH=`echo $PATH | sed "s/\.\/node_modules\/\.bin//g"`
  - export PATH=$PATH
  - echo $PATH

  # Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc
  - export ENCRYPTED_KEY_VAR="encrypted_${ENCRYPTION_LABEL}_key"
  - export ENCRYPTED_IV_VAR="encrypted_${ENCRYPTION_LABEL}_iv"
  - export ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
  - export ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
  - export DEPLOY_KEY="scripts/travisci_deploy_key"
  - openssl aes-256-cbc -K "$ENCRYPTED_KEY" -iv "$ENCRYPTED_IV" -in "$DEPLOY_KEY.enc" -out "$DEPLOY_KEY" -d
  - chmod 600 "$DEPLOY_KEY"
  - eval $(ssh-agent -s)
  - ssh-add "$DEPLOY_KEY"

  # make sure to use ruby 2.3
  - |
    if [[ $android || $ios ]]; then
      set -x
      rvm use 2.3 --install --binary --fuzzy
      gem install bundler
      set +x
    fi



install:
  # install packages
  - npm install
  # install fastlane
  - if [[ $android || $ios ]]; then bundle install --deployment; fi


before_script:
  # Fire up the Android emulator
  - |
    if [[ $android && $emulator ]]; then
      set -x
      EmuName="react-native"
      mkdir -p "$HOME/.android/avd/$EmuName.avd/"
      echo no | android create avd --force -n "$EmuName" -t android-23 --abi google_apis/armeabi-v7a
      emulator -avd "$EmuName" -no-audio -no-window &
      android-wait-for-emulator
      adb shell input keyevent 82 &
      set +x
    fi

  # Fix keychain issues for iOS signing
  - if [[ $ios ]]; then bundle exec fastlane ios ci_keychains; fi


script:
  # These sections will grow over time.
  # Each line is collapsed nicely in the travis output.

  # Make sure that a failing command in a pipe fails the build
  - set -o pipefail

  # ensure the env file exists and fill it out
  - touch .env.js
  - echo "export const GOOGLE_CALENDAR_API_KEY = '$GCAL_KEY'" >> .env.js
  - mkdir -p logs/

  # disable npm wrapper for npm scripts
  - echo "loglevel=silent" >> .npmrc

  # JS
  # Ensure prettiness
  - |
    if [[ $js ]]; then
      set -x
      npm run prettier
      git diff --exit-code *.js source/ | tee logs/prettier
      set +x
    fi
  # Lint
  - if [[ $js ]]; then npm run lint | tee logs/eslint; fi
  # Validate data
  - if [[ $js ]]; then npm run validate-data -- --quiet | tee logs/validate-data; fi
  # Ensure that the data files have been updated
  - |
    if [[ $js ]]; then
      set -x
      npm run bundle-data
      if ! git diff --quiet docs/; then
        git add docs/
        git checkout "$BRANCH"
        git commit -m "update docs [skip ci]"
        git checkout "$TRAVIS_COMMIT"
      fi
      set +x
    fi
  # Type check
  - if [[ $js ]]; then npm run flow -- check --quiet | tee logs/flow; fi
  # Build the bundles
  - if [[ $js ]]; then npm run bundle:ios | tee logs/bundle-ios; fi
  - if [[ $js ]]; then npm run bundle:android | tee logs/bundle-android; fi
  # Run tests + collect coverage info
  - if [[ $js ]]; then npm run test -- --coverage 2>&1 | tee logs/jest; fi
  # Danger?
  - if [[ $js ]]; then npm run danger; fi

  # iOS
  - if [[ $ios ]]; then bundle exec fastlane ios ci_run; fi

  # Android
  - if [[ $android ]]; then bundle exec fastlane android ci_run; fi


after_success:
  # todo: test this on a forked build w/maintainer access to the branch
  - |
    if [[ $js && $TRAVIS_PULL_REQUEST != "false" ]]; then
      set -x
      git checkout "$BRANCH"
      git push "$SSH_REPO" "$BRANCH"
      git checkout "$TRAVIS_COMMIT"
      set +x
    fi
  - |
    if [[ $js ]]; then
      set -x
      npm install coveralls
      ./node_modules/.bin/coveralls < ./coverage/lcov.info
      set +x
    fi
