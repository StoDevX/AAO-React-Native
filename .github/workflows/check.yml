name: Check

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  node_version: '^16.0'
  ruby_version: '2.6'
  jdk_version: 'jdk8'
  xcode_version: 'Xcode_13.1'

jobs:
  comment:
    name: Comment on the PR
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0
      - name: Generate comment
        run: echo "comment $(date)" > ./output.txt
      - name: Publish comment
        run: |
          gh pr comment --edit-last --body-file ./output.txt || gh pr comment --body-file ./output.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cache-npm-linux:
    name: Cache npm for Linux
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Prepare node_modules cache
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: npm

      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  cache-npm-macos:
    name: Cache npm for macOS
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Prepare node_modules cache
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: npm

      - if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

  cache-bundler-macos:
    name: Cache bundler for macOS
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.ruby_version }}
          bundler-cache: true

  cache-gradle:
    name: Cache Gradle
    needs: [cache-npm-linux]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1

      - name: Raise the fs.inotify ulimits
        run: |
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
          sudo sysctl -p

      - run: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties

      - uses: burrunan/gradle-cache-action@v1
        name: Run Gradle to cache dependencies
        with:
          job-id: ${{ env.jdk_version }}
          arguments: --build-cache androidDependencies
          gradle-version: wrapper
          build-root-directory: android

  cache-cocoapods:
    name: iOS Cocoapods
    needs: [ cache-npm-macos, cache-bundler-macos ]
    runs-on: macos-11
    steps:
      - run: sudo xcode-select -s /Applications/${{ env.xcode_version }}.app

      - uses: actions/checkout@v3.3.0

      - name: Restore Cocoapods cache
        uses: actions/cache@v3
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-cocoapods-ruby@${{ env.ruby_version }}-xcode@${{ env.xcode_version }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}

      - if: steps.pods-cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - if: steps.pods-cache.outputs.cache-hit != 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.ruby_version }}
          bundler-cache: true

      - name: Restore node_modules cache
        if: steps.pods-cache.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.pods-cache.outputs.cache-hit != 'true' && steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1

      - if: steps.pods-cache.outputs.cache-hit != 'true'
        run: bundle exec pod install --deployment
        working-directory: ./ios

  prettier:
    name: Prettier
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - run: npm run pretty -- --no-write --list-different

  eslint:
    name: ESLint
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - run: npm run lint

  jest:
    name: Jest
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - run: npm run bundle-data

      - name: Run tests
        run: npm run test -- --coverage

      - name: Upload coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)

  tsc:
    name: TypeScript
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - run: npm run bundle-data

      - run: npx tsc

  data:
    name: Data
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - run: npm run validate-data

      - run: npm run bundle-data

  ios-bundle:
    name: iOS Bundle
    needs: [ cache-npm-macos ]
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - name: Cache the jsbundle
        uses: actions/cache@v3
        id: jsbundle
        with:
          path: |
            ios/AllAboutOlaf/main.jsbundle
            ios/AllAboutOlaf/main.jsbundle.map
            ios/AllAboutOlaf/assets/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-pkg@${{ hashFiles('package-lock.json') }}-files@${{ hashFiles('tsconfig.json', 'babel.config.js', 'index.js', 'data/**', 'images/**', 'modules/**.ts', 'modules/**.tsx', 'source/**.ts', 'source/**.tsx') }}

      - name: Generate jsbundle
        if: steps.jsbundle.outputs.cache-hit != 'true'
        run: |
          npm run bundle-data
          npm run bundle:ios

  android-bundle:
    name: Android Bundle
    needs: [ cache-npm-linux ]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - name: Cache the jsbundle
        uses: actions/cache@v3
        id: jsbundle
        with:
          path: |
            ./android/app/src/main/assets/index.android.bundle
            ./android/app/src/main/assets/index.android.bundle.map
            ./android/app/src/main/res/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-pkg@${{ hashFiles('package-lock.json') }}-files@${{ hashFiles('tsconfig.json', 'babel.config.js', 'index.js', 'data/**', 'images/**', 'modules/**.ts', 'modules/**.tsx', 'source/**.ts', 'source/**.tsx') }}

      - name: Generate jsbundle
        if: steps.jsbundle.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./android/app/src/main/assets/
          npm run bundle-data
          npm run bundle:android

  android:
    name: Build for Android
    needs: [jest, eslint, android-bundle, cache-npm-linux, cache-gradle]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.3.0

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.ruby_version }}
          bundler-cache: true

      - name: Raise the fs.inotify ulimits
        run: |
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
          sudo sysctl -p

      - run: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties

      - uses: burrunan/gradle-cache-action@v1
        name: Run Gradle
        with:
          # cache-only mode
          job-id: ${{ env.jdk_version }}
          gradle-version: wrapper
          build-root-directory: android

      - run: bundle exec fastlane android ci-run
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $GITHUB_SHA)
          FASTLANE_SKIP_UPDATE_CHECK: '1'
          FASTLANE_DISABLE_ANIMATION: '1'
          SENTRY_ORG: frog-pond-labs
          SENTRY_PROJECT: all-about-olaf
          SENTRY_AUTH_TOKEN: ${{ secrets.HOSTED_SENTRY_AUTH_TOKEN }}
          GITHUB_KEYS_REPOSITORY_TOKEN: ${{ secrets.GITHUB_KEYS_REPOSITORY_TOKEN }}

  ios-build:
    name: Build for iOS
    needs: [jest, eslint, ios-bundle, cache-npm-macos, cache-bundler-macos, cache-cocoapods]
    runs-on: macos-11
    steps:
      - run: sudo xcode-select -s /Applications/${{ env.xcode_version }}.app

      - uses: actions/checkout@v3.3.0

      - name: Cache the iOS app
        id: app
        uses: actions/cache@v3
        with:
          path: ios/build/Build/Products/
          key: ${{ runner.os }}-ios-xcode@${{ env.xcode_version }}-pbxproj@${{ hashFiles('**/project.pbxproj') }}-podfile@${{ hashFiles('**/Podfile.lock') }}-packagelock@${{ hashFiles('package-lock.json') }}

      - if: steps.app.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}

      - if: steps.app.outputs.cache-hit != 'true'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
          bundler-cache: true

      - name: Restore node_modules cache
        if: steps.app.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - name: exit if the node_modules cache did not load
        if: steps.app.outputs.cache-hit != 'true' && steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1

      - name: Restore Cocoapods cache
        if: steps.app.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-cocoapods-ruby@${{ env.ruby_version }}-xcode@${{ env.xcode_version }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}

      - name: exit if the Cocoapods cache did not load
        if: steps.app.outputs.cache-hit != 'true' && steps.pods-cache.outputs.cache-hit != 'true'
        run: exit 1

      - if: steps.app.outputs.cache-hit != 'true'
        uses: mikehardy/buildcache-action@v2
        continue-on-error: true

      - name: Build the iOS app
        if: steps.app.outputs.cache-hit != 'true'
        run: npx detox build e2e --configuration ios.sim.release

  ios-detox:
    name: Detox E2E for iOS
    needs: [cache-npm-macos, ios-build, ios-bundle]
    runs-on: macos-11
    steps:
      - run: sudo xcode-select -s /Applications/${{ env.xcode_version }}.app

      - uses: actions/checkout@v3.3.0

      - # load the app before reinstalling detox, so that the package-lock cannot change
        name: Load the cached iOS app
        uses: actions/cache/restore@v3
        id: app
        with:
          path: ios/build/Build/Products/
          key: ${{ runner.os }}-ios-xcode@${{ env.xcode_version }}-pbxproj@${{ hashFiles('**/project.pbxproj') }}-podfile@${{ hashFiles('**/Podfile.lock') }}-packagelock@${{ hashFiles('package-lock.json') }}

      - if: steps.app.outputs.cache-hit != 'true'
        run: exit 1

      - # load the jsbundle before reinstalling detox, so that the package-lock cannot change
        name: Load the cached iOS jsbundle
        uses: actions/cache/restore@v3
        id: jsbundle
        with:
          path: |
            ios/AllAboutOlaf/main.jsbundle
            ios/AllAboutOlaf/main.jsbundle.map
            ios/AllAboutOlaf/assets/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-pkg@${{ hashFiles('package-lock.json') }}-files@${{ hashFiles('tsconfig.json', 'babel.config.js', 'index.js', 'data/**', 'images/**', 'modules/**.ts', 'modules/**.tsx', 'source/**.ts', 'source/**.tsx') }}

      - if: steps.jsbundle.outputs.cache-hit != 'true'
        run: exit 1

      - name: Move cached jsbundle into place
        run: |
          mv ios/AllAboutOlaf/main.jsbundle ios/build/Build/Products/Release-iphonesimulator/AllAboutOlaf.app/
          mv ios/AllAboutOlaf/main.jsbundle.map ios/build/Build/Products/Release-iphonesimulator/AllAboutOlaf.app/
          rm -rf ios/build/Build/Products/Release-iphonesimulator/AllAboutOlaf.app/assets
          mv ios/AllAboutOlaf/assets ios/build/Build/Products/Release-iphonesimulator/AllAboutOlaf.app/

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node_version }}
          cache: npm

      - name: Restore node_modules cache
        uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ env.node_version }}-${{ hashFiles('package-lock.json') }}

      - # We have to re-install Detox because it installs things outside of node_modules/detox/…
        name: Install Detox
        run: |
          npm uninstall detox
          npm install detox

      - run: brew tap wix/brew

      - run: brew install applesimutils

      - name: Boot the simulator
        run: xcrun simctl boot "$(applesimutils --byName 'iPhone 11 Pro' --byOS '15.0' --list | jq -r '.[0].udid')"

      - name: Run the Detox tests
        run: npx detox test e2e --configuration ios.sim.release --cleanup --debug-synchronization 500
