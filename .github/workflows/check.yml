name: Check

on:
  push:

jobs:
  cache-npm-linux:
    name: ${{ matrix.os }} cache npm
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        # I'm a little worried about using allowing the minor version to fluctuate across cache hits...
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/cache/restore@v3
        id: cache-restore
        with: 
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with: {node-version: '${{ matrix.node }}', cache: npm}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm ci
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with: 
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}

  cache-npm-macos:
    name: ${{ matrix.os }} cache npm
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11 ]
        # I'm a little worried about using allowing the minor version to fluctuate across cache hits...
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with: {node-version: '${{ matrix.node }}', cache: npm}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm ci
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}

  cache-bundler-macos:
    name: ${{ matrix.os }} cache bundler
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11 ]
        # I'm a little worried about using allowing the minor version to fluctuate across cache hits...
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-ruby-bundler@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: ruby/setup-ruby@v1
        with: {ruby-version: '${{ matrix.ruby }}', bundler-cache: true}

  prettier:
    name: Prettier
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run pretty -- --no-write --list-different

  eslint:
    name: ESlint
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run lint

  jest:
    name: Jest
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run bundle-data
      - name: Run tests
        run: npm run test -- --coverage
      - name: Upload coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)

  tsc:
    name: TypeScript
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run bundle-data
      - run: npx tsc

  data:
    name: Data
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run validate-data
      - run: npm run bundle-data

  ios-pods:
    name: iOS Cocoapods
    needs: [ cache-npm-macos ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11 ]
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
        xcode: [ Xcode_13.1 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1
      - uses: ruby/setup-ruby@v1
        with: { ruby-version: '${{ matrix.ruby }}', bundler-cache: true }
      - uses: actions/cache@v3
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-cocoapods-ruby@${{ matrix.ruby }}-xcode@${{ matrix.xcode }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}
      - run: sudo xcode-select -s /Applications/${{ matrix.xcode }}.app
      - if: steps.pods-cache.outputs.cache-hit != 'true'
        run: bundle exec pod install --deployment
        working-directory: ./ios

  ios-bundle:
    name: iOS Bundle
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run bundle-data
      - run: npm run bundle:ios

  android-bundle:
    name: Android Bundle
    needs: [ cache-npm-linux ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: npm run bundle-data
      - run: mkdir -p ./android/app/src/main/assets/
      - run: npm run bundle:android

  android-gradle-cache:
    name: Android Gradle Cache
    needs: [cache-npm-linux]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
        jdk: [ jdk8 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1
      - name: Raise the fs.inotify ulimits to 524288 watches/queued events/user instances
        run: |
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
          sudo sysctl -p
      - run: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties
      - uses: burrunan/gradle-cache-action@v1
        name: Build for Android
        with:
          job-id: ${{ matrix.jdk }}
          arguments: androidDependencies
          gradle-version: wrapper
          build-root-directory: android

  android:
    name: Build for Android
    needs: [android-gradle-cache]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04 ]
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
        jdk: [ jdk8 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: node-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.node-cache.outputs.cache-hit != 'true'
        run: exit 1
      - uses: ruby/setup-ruby@v1
        with: { ruby-version: '${{ matrix.ruby }}', bundler-cache: true }
      - name: Raise the fs.inotify ulimits to 524288 watches/queued events/user instances
        run: |
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_watches
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_queued_events
          echo 524288 | sudo tee -a /proc/sys/fs/inotify/max_user_instances
          sudo sysctl -p
      - run: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties
      - uses: burrunan/gradle-cache-action@v1
        name: Build for Android
        with:
          # cache-only mode
          job-id: ${{ matrix.jdk }}
          gradle-version: wrapper
          build-root-directory: android
      - run: bundle exec fastlane android ci-run
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $GITHUB_SHA)
          FASTLANE_SKIP_UPDATE_CHECK: '1'
          FASTLANE_DISABLE_ANIMATION: '1'
          SENTRY_ORG: frog-pond-labs
          SENTRY_PROJECT: all-about-olaf
          SENTRY_AUTH_TOKEN: ${{ secrets.HOSTED_SENTRY_AUTH_TOKEN }}
          GITHUB_KEYS_REPOSITORY_TOKEN: ${{ secrets.GITHUB_KEYS_REPOSITORY_TOKEN }}

  ios-build:
    name: Build for iOS
    needs: [jest, eslint, ios-bundle, cache-npm-macos, cache-bundler-macos, ios-pods]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11 ]
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
        xcode: [ Xcode_13.1 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6'
          bundler-cache: true
      - uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - uses: actions/cache@v3
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-cocoapods-ruby@${{ matrix.ruby }}-xcode@${{ matrix.xcode }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}
      - run: sudo xcode-select -s /Applications/${{ matrix.xcode }}.app
      - if: steps.pods-cache.outputs.cache-hit != 'true'
        run: exit 1
      - run: npx detox build e2e --configuration ios.sim.release
      - uses: actions/cache/save@v3
        with:
          path: ios/build/Build/Products/
          key: ${{ runner.os }}-ios-xcode@${{ matrix.xcode }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}

  ios-detox:
    name: Detox E2E for iOS
    needs: [ios-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-11 ]
        node: [ ^16.0 ]
        ruby: [ 2.6 ]
        xcode: [ Xcode_13.1 ]
    steps:
      - uses: actions/checkout@v3.3.0
      - uses: actions/setup-node@v3
        with: { node-version: '${{ matrix.node }}' }
      - uses: actions/cache/restore@v3
        id: npm-cache-restore
        with:
          path: node_modules/
          key: ${{ runner.os }}-npm-node@${{ matrix.node }}-${{ hashFiles('package-lock.json') }}
      - if: steps.npm-cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: sudo xcode-select -s /Applications/${{ matrix.xcode }}.app
      - uses: actions/cache/restore@v3
        id: binary-cache-restore
        with:
          path: ios/build/Build/Products/
          key: ${{ runner.os }}-ios-xcode@${{ matrix.xcode }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('**/Podfile.lock') }}-${{ hashFiles('package-lock.json') }}
      - if: steps.binary-cache-restore.outputs.cache-hit != 'true'
        run: exit 1
      - run: brew tap wix/brew
      - run: brew install applesimutils
      - run: npx detox test e2e --configuration ios.sim.release --cleanup --debug-synchronization 500
