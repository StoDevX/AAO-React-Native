name: Analyze and Build

on: push

jobs:
  environment:
    # All of these variables are defined here just so that GitHub doesn't
    # complain about them existing.
    name: Environment Setup
    runs-on: ubuntu-latest
    steps:
      - run: echo 'default environment'
        env: &base-env
          # The bundle identifier of your app
          APP_IDENTIFIER: &app_identifier 'NFMTHAZVS9.com.drewvolz.stolaf'

          # Your Apple email address
          APPLE_ID: 'aao_bot@fastmail.fm'
          APPLE_DEV_PORTAL_ID: 'hawkrives@gmail.com'

          # Your Apple Developer Team ID, if you are in multiple teams
          TEAM_ID: &team_id 'TMK6S7TPX2'
          ITC_TEAM_ID: '118781268'

          # This is a private key. It is not included in the repository.
          # Contact allaboutolaf@stolaf.edu or another admin if you need access.
          JSON_KEY_FILE: './fastlane/play-private-key.json'
          PACKAGE_NAME: 'com.allaboutolaf'

          # set up global info for `gym`
          GYM_PROJECT: './ios/AllAboutOlaf.xcodeproj'
          IOS_INFO_PLIST: './ios/AllAboutOlaf/Info.plist'
          GYM_SCHEME: 'AllAboutOlaf'
          GYM_OUTPUT_DIRECTORY: './ios/build'
          GYM_OUTPUT_NAME: 'AllAboutOlaf'
          GYM_ARCHIVE_PATH: './ios/archive/app.xcarchive'

          # set the testflight itunesconnect provider ID from Appfile
          PILOT_ITC_PROVIDER: *team_id

          GRADLE_FILE: './android/app/build.gradle'
          KEYSTORE_FILE: './android/app/upload-keystore.properties'

          # set up other global shared values
          PRETTY_APP_NAME: 'All About Olaf'
          ONESIGNAL_APP_NAME: 'All About Olaf'
          ONESIGNAL_APP_ID: 'a46c6f2f-a240-4908-a359-801911e9b9ea'
          APPLE_APP_ID: *app_identifier
          APPLE_APP_NAME: 'All About Olaf'
          APPLE_PUSH_EXTENSION_ID: 'NFMTHAZVS9.com.drewvolz.stolaf.onesignal-notification-service-extension'
          APPLE_PUSH_EXTENSION_NAME: 'All About Olaf OneSignal Notification Service Extension'

      - run: echo 'android environment'
        env: &base-android-env
          <<: *base-env
          PLATFORM: android

      - run: echo 'android environment'
        env: &base-ios-env
          <<: *base-env
          PLATFORM: ios

      - run: echo 'conditionals'
        env:
          a: &is-nightly-or-beta ${{ github.event_name == schedule || startsWith(github.ref, 'refs/tags/' }}
          b: &is-nightly ${{ github.event_name == schedule }}
          c: &is-beta ${{ startsWith(github.ref, 'refs/tags/' }}
          d: &signed ${{ secrets.MATCH_PASSWORD != '' && secrets.FASTLANE_PASSWORD != '' }}

  js:
    name: JavaScript Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@master
        with: {node-version: ^12.0}
      - uses: actions/checkout@master
      - run: yarn install --frozen-lockfile
      - run: yarn run bundle-data
      - run: yarn run pretty
      - run: yarn run flow check
      - run: yarn run lint
      - name: Run tests
        run: yarn run test --coverage
      - name: Upload coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: bash <(curl -s https://codecov.io/bash)

  android:
    name: Build for Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@master
        with: {node-version: ^12.0}
      - uses: actions/setup-ruby@master
        with: {ruby-version: ^2.6}
      - uses: actions/checkout@master

      - run: yarn install --frozen-lockfile
      - run: gem install bundler
      - run: bundle install --frozen --path vendor/bundle

      - run: ./scripts/ci/propagate-version.rb
        env: *base-android-env

      - run: cd android && ./gradlew androidDependencies --console=plain
      - run: echo 'org.gradle.workers.max=2' >> ./android/gradle.properties
      - run: bundle exec fastlane android ci-run
        env:
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          MAPBOX_KEY: ${{ secrets.MAPBOX_KEY }}
          ONESIGNAL_KEY: ${{ secrets.ONESIGNAL_KEY }}
          GIT_COMMIT_DESC: $(git log --format=oneline -n 1 $GITHUB_SHA)
          FASTLANE_SKIP_UPDATE_CHECK: '1'
          FASTLANE_DISABLE_ANIMATION: '1'
          SENTRY_PROPERTIES: '../android/sentry.properties'
          GITHUB_KEYS_REPOSITORY_TOKEN: ${{ secrets.GITHUB_KEYS_REPOSITORY_TOKEN }}

  ios:
    name: Build for iOS
    runs-on: macOS-latest
    steps:
      - uses: actions/setup-node@master
        with: {node-version: ^12.0}
      - uses: actions/checkout@master

      - run: yarn install --frozen-lockfile
      - run: gem install bundler
      - run: bundle install --frozen --path vendor/bundle

      - run: ./scripts/ci/propagate-version.rb
        env: *base-ios-env

      - run: xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings -derivedDataPath ./ios/build
        env: *base-ios-env
        name: 'Show Xcode build settings (for Detox)'

      - run: xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT" -showBuildSettings
        if: *is-nightly-or-beta
        env: *base-ios-env
        name: 'Show Xcode build settings (for release)'

      - run: ./scripts/ci/ios/discover-products.sh | tee ./logs/products
        env: *base-ios-env

      - run: ./scripts/ci/authorize-ci-for-keys.rb
        if: *signed
        env: *base-ios-env
        name: '[signed=true] Authorize CI for GitHub access'

      - run: ./scripts/ci/ios/init-keychain.rb > ./keychain.env.sh
        if: *signed
        env: *base-ios-env
        name: '[signed=true] Initialize local keychain for signing'

      - run: source ./keychain.env.sh && ./scripts/ci/ios/certificates.sh 'appstore'
        name: '[signed=true] Initialize signing certificates'
        if: *signed
        env:
          <<: *base-ios-env
          GITHUB_KEYS_REPOSITORY_TOKEN: ${{ secrets.GITHUB_KEYS_REPOSITORY_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}

      - run: xcodebuild
          -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
          -configuration Release
          -destination 'platform=iOS Simulator,name=iPhone 7,OS=12.2'
          -derivedDataPath ./ios/build
          CODE_SIGNING_REQUIRED=NO
          CODE_SIGNING_ALLOWED=NO
          CODE_SIGN_IDENTITY=""
          build | xcpretty
        env: *base-ios-env
        name: 'Detox: build app for testing'

      - run: brew tap wix/brew
      - run: brew install applesimutils

      - run: yarn detox test e2e --configuration ios.sim.release --cleanup
        env: *base-ios-env

      - run: xcodebuild -scheme "$GYM_SCHEME" -project "$GYM_PROJECT"
          -destination generic/platform=iOS
          -archivePath "$GYM_ARCHIVE_PATH"
          archive | xcpretty
        if: *is-nightly-or-beta
        env: *base-ios-env
        name: '[nightly || beta] Build app for releasing'

      - run: bundle exec fastlane run upload_to_testflight
          --distribute_external=true
          --ipa $(cat ./logs/products)
        if: *is-beta
        env: *base-ios-env
        name: '[beta=true] Upload to TestFlight'

      - run: bundle exec fastlane run upload_to_testflight
          --distribute_external=false
          --ipa $(cat ./logs/products)
        if: *is-nightly
        env: *base-ios-env
        name: '[nightly=true] Upload to TestFlight'

      - run: ./scripts/ci/sourcemap-create.sh
        if: *is-nightly-or-beta
        env: *base-ios-env
        name: '[nightly || beta] Generate sourcemap'

      - run: ./scripts/ci/sourcemap-upload.sh
        if: *is-nightly-or-beta
        env: *base-ios-env
        name: '[nightly || beta] Upload sourcemap to Sentry'
