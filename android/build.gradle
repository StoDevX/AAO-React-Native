// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        buildToolsVersion = "33.0.0"
        minSdkVersion = 21
        compileSdkVersion = 34
        targetSdkVersion = 34
        kotlinVersion = '1.9.25'
        // react-native-inappbrowser-reborn was using a 1.+ which pulled in an alpha which is very bad
        // - we will want to upgrade to 1.5.0 when we support minsdk 33
        // - we can delete this when inappbrowser-reborn changes their build script to avoid this pattern
        //   but until then, we'll keep it pinned since a future alpha release could cause this problem.
        androidXBrowser = "1.4.0"
        // react-native-inappbrowser-reborn installs androidx.annotations@1.6.0 which has a dependency on
        // kotlin-stdlib:1.8.0. By default, gradle is using the higher version of this lib in the project
        // which causes incompatabilities between kotlin-stdlib-jdk8 and kotlin-stdlib-jdk7. This is due
        // to the merge of jdk7 & jdk8 artifacts that occured in kotlin-stdlib:1.8.0, resulting in an
        // an error if you use packages that have kotlin-stdlib-jdk7/8 < 1.8.0. The latest
        // includes a kotlin 1.8.0 dependency that enables this issue and fails to build.
        androidXAnnotation = "1.5.0"
        // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
        ndkVersion = "23.1.7779620"
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath('com.android.tools.build:gradle')
        classpath("com.facebook.react:react-native-gradle-plugin")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
    }

    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

ext {
    ciBuild = (System.getenv("CI") ?: "") != ""
    // allows for -Dpre-dex=false to be set
    preDexEnabled = System.getProperty("pre-dex", "true") == "true"
}

subprojects {
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion

                defaultConfig {
                    targetSdkVersion rootProject.ext.targetSdkVersion
                    minSdkVersion rootProject.ext.minSdkVersion
                }
            }
        }
    }
}

def isCiServer = System.getenv().containsKey("CI")
// Auto-accept Gradle's TOS (but only in CI!)
if (isCiServer && hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
