// this plugin adapts the gradle build for android apps
apply plugin: 'com.android.application'
apply plugin: 'com.facebook.react'
// this plugin applies dependency locking to gradle dependencies
apply plugin: 'nebula.dependency-lock'


/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node-modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

def skipBundling = System.getenv().containsKey("SKIP_BUNDLING")
project.react = [
    bundleInDebug: !skipBundling,
    bundleInRelease: !skipBundling,
]

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * Fetch the keystore file's path from the environment
 */
String keystorePath = System.getenv("KEYSTORE_FILE")

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    namespace "com.allaboutolaf"

    defaultConfig {
        applicationId "com.allaboutolaf"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0.0"

        manifestPlaceholders = [
            manifestApplicationId: applicationId,
        ]
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        // originally derived from https://gist.github.com/gabrielemariotti/6856974
        if (keystorePath == null) {
            logger.warn "env['KEYSTORE_FILE'] not set"
            release
            return
        } else {
            logger.warn "env['KEYSTORE_FILE'] = ${keystorePath}"
        }

        def propFile = new File(keystorePath)
        if (!propFile.canRead()) {
            logger.warn "${keystorePath} is not readable"
            release
            return
        }

        def props = new Properties()
        props.load(new FileInputStream(propFile))

        release {
            storeFile file(props['STORE_FILE'])
            storePassword props['STORE_PASSWORD']
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [isDebug: true]
            signingConfig signingConfigs.debug
        }

        release {
            manifestPlaceholders = [isDebug: false]

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (keystorePath != null) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    configurations.all {
        resolutionStrategy.force 'org.webkit:android-jsc:r250230'
    }
}

dependencies {
    // required by react-native-screens
    implementation("androidx.appcompat:appcompat:1.6.1")

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    implementation("com.facebook.react:hermes-android")
}

dependencyLocking {
    lockAllConfigurations()
    // lockMode = LockMode.STRICT
}

project.ext.vectoricons = [
    // Name of the font files you want to copy
    iconFontNames: [
        'MaterialCommunityIcons.ttf',
        'Entypo.ttf',
        'Ionicons.ttf',
    ],
]

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")

applyNativeModulesAppBuildGradle(project)
