apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    // ignore the ruby deps
    inputExcludes: ["android/**", "ios/**", "vendor/**"],
    // set the input file manually
    entryFile: "index.js",
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "com.allaboutolaf"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        manifestPlaceholders = [
            manifestApplicationId: applicationId,
            onesignal_app_id: "aa46a500-ab1c-4127-b9ff-e7373da3ce35",
            onesignal_google_project_number: "185558680648",
            gmaps_key: System.getenv("GMAPS_KEY") ?: "",
        ]
    }
    signingConfigs {
        // the signingConfig is configured below
        release
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    android {
        dexOptions {
            // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
            preDexLibraries = preDexEnabled && !travisBuild
        }
    }
}

// borrowed from https://gist.github.com/gabrielemariotti/6856974
def propFile = new File('android/app//signing.properties')
if (propFile.canRead()) {
    Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null
            && props.containsKey('STORE_FILE')
            && props.containsKey('STORE_PASSWORD')
            && props.containsKey('KEY_ALIAS')
            && props.containsKey('KEY_PASSWORD')
    ) {
        logger.info 'android/app/signing.properties is fully functional.'
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'android/app/signing.properties found, but some entries are missing.'
        if (props == null) {
            logger.warn '`props` was null'
        } else {
            logger.warn "has STORE_FILE: ${props.containsKey('STORE_FILE')}"
            logger.warn "has STORE_PASSWORD: ${props.containsKey('STORE_PASSWORD')}"
            logger.warn "has KEY_ALIAS: ${props.containsKey('KEY_ALIAS')}"
            logger.warn "has KEY_PASSWORD: ${props.containsKey('KEY_PASSWORD')}"
        }
        android.buildTypes.release.signingConfig = null
    }
} else {
    logger.warn 'android/app/signing.properties not found.'
    logger.warn "cwd: ${new File(".").absolutePath}"
    android.buildTypes.release.signingConfig = null
}

dependencies {
    // please keep this list sorted
    compile project(':bugsnag-react-native')
    compile project(':react-native-calendar-events')
    compile project(':react-native-custom-tabs')
    compile project(':react-native-device-info')
    compile project(':react-native-google-analytics-bridge')
    compile project(':react-native-keychain')
    compile project(':react-native-linear-gradient')
    compile project(':react-native-maps')
    compile project(':react-native-network-info')
    compile project(':react-native-onesignal')
    compile project(':react-native-restart')
    compile project(':react-native-vector-icons')
    // this is for react-native itself
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// Bundles the app's data for the build process
task bundleData(type: Exec) {
    commandLine 'npm', 'run', 'bundle-data'
}

gradle.projectsEvaluated {
    // hook bundleData into the android build process
    bundleDebugJsAndAssets.dependsOn bundleData
    bundleReleaseJsAndAssets.dependsOn bundleData
}
