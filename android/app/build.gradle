// this includes the onesignal gradle plugin
apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
// this plugin adapts the gradle build for android apps
apply plugin: 'com.android.application'

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    // ignore the ruby deps
    inputExcludes: ["android/**", "ios/**", "vendor/**"],
    // set the input file manually
    entryFile: "index.js",
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * Fetch the keystore file's path from the environment
 */
String keystorePath = System.getenv("KEYSTORE_FILE")

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.allaboutolaf"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        versionCode 1
        versionName "1.0.0"

        manifestPlaceholders = [
            manifestApplicationId: applicationId,
            onesignal_google_project_number: "REMOTE",
        ]
    }

    signingConfigs {
        // originally derived from https://gist.github.com/gabrielemariotti/6856974
        if (keystorePath == null) {
            logger.warn "env['KEYSTORE_FILE'] not set"
            release
            return
        } else {
            logger.warn "env['KEYSTORE_FILE'] = ${keystorePath}"
        }

        def propFile = new File(keystorePath)
        if (!propFile.canRead()) {
            logger.warn "${keystorePath} is not readable"
            release
            return
        }

        def props = new Properties()
        props.load(new FileInputStream(propFile))

        release {
            storeFile file(props['STORE_FILE'])
            storePassword props['STORE_PASSWORD']
            keyAlias props['KEY_ALIAS']
            keyPassword props['KEY_PASSWORD']
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [isDebug: true]
        }

        release {
            manifestPlaceholders = [isDebug: false]

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (keystorePath != null) {
                signingConfig signingConfigs.release
            }
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // Because we're only generating one universal APK, this is commented out and the "nil"
            // logic described here is instead implemented in fastlane.

            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            // def versionCodes = ["armeabi-v7a":1, "x86":2, nil:2, "arm64-v8a": 3, "x86_64": 4]

            // `abi` is null for the universal-debug, universal-release variants
            // def abi = output.getFilter(OutputFile.ABI)

            // if (abi != null) {
            //     output.versionCodeOverride =
            //             versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            // }
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !ciBuild
    }

    configurations.all {
        resolutionStrategy.force "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
        resolutionStrategy.force "com.android.support:customtabs:${rootProject.ext.supportLibVersion}"
        resolutionStrategy.force "com.android.support:support-media-compat:${rootProject.ext.supportLibVersion}"
        resolutionStrategy.force "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"

        resolutionStrategy.force 'org.webkit:android-jsc:r236355'
    }
}

dependencies {
    // please keep this list sorted
    implementation project(':mapbox-react-native-mapbox-gl')
    implementation project(':react-native-calendar-events')
    implementation project(':@react-native-community_async-storage')
    implementation project(':@react-native-community_netinfo')
    implementation project(':react-native-custom-tabs')
    implementation project(':react-native-device-info')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-keychain')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-network-info')
    implementation project(':react-native-onesignal')
    implementation project(':react-native-restart')
    implementation project(':react-native-sentry')
    implementation project(':react-native-vector-icons')

    // this is for react-native itself
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
}

// Bundles the app's data for the build process
task bundleData(type: Exec) {
    workingDir '../../'
    commandLine 'npm', 'run', 'bundle-data'
}

gradle.projectsEvaluated {
    // hook bundleData into the android build process
    if (project.hasProperty('bundleDebugJsAndAssets')) {
        bundleDebugJsAndAssets.dependsOn bundleData
    }
    if (project.hasProperty('bundleReleaseJsAndAssets')) {
        bundleReleaseJsAndAssets.dependsOn bundleData
    }
}
