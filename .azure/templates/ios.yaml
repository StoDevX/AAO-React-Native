parameters:
  signed: false
  is_nightly: false
  is_beta: false
  SENTRY_PROPERTIES: ../ios/sentry.properties

steps:
  - bash: mkdir -p logs/
    displayName: 'Set up /logs'

  - bash: yarn install --frozen-lockfile
    displayName: 'Install dependencies (yarn)'

  - bash: bundle install --frozen --path ./vendor/bundle
    displayName: 'Install dependencies (bundler)'

  - bash: ./scripts/ci/authorize-ci-for-keys.rb
    displayName: 'Authorize CI for GitHub access'

  - bash: ./scripts/ci/propagate-version.rb
    displayName: 'Propagate build number into app version file'

  - bash:
      xcodebuild -scheme='$(GYM_SCHEME)' -project='$(GYM_PROJECT)' -showBuildSettings
    displayName: 'Show Xcode build settings'

  - bash: ./scripts/ci/ios/discover-products.sh > ./logs/products
    displayName: 'Set up products logfile'

  - ${{ if eq(parameters.signed, true) }}:
    - bash: ./scripts/ci/ios/certificates.sh 'appstore'
      displayName: 'Initialize signing certificates'
      env:
        GITHUB_KEYS_REPOSITORY_TOKEN: $(GITHUB_KEYS_REPOSITORY_TOKEN)
        MATCH_PASSWORD: $(MATCH_PASSWORD)

  - bash:
      cd ios &&
      xcodebuild
        -project '$(GYM_PROJECT)' -scheme '$(GYM_SCHEME)'
        -configuration Debug
        -destination 'platform=iOS Simulator,name=iPhone 8,OS=12.2'
        -derivedDataPath ./build
        CODE_SIGNING_REQUIRED=NO
        CODE_SIGNING_ALLOWED=NO
        CODE_SIGN_IDENTITY=""
        build
    displayName: 'Build app with Xcode for testing with Detox'

  - bash: brew tap wix/brew
    displayName: 'tap wix/brew'

  - bash: brew install applesimutils
    displayName: 'install applesimutils for detox'

  # - bash: yarn detox build e2e --configuration ios.sim.debug
  #   displayName: 'Detox: build the app'

  - bash: yarn detox test e2e --configuration ios.sim.debug --cleanup
    displayName: 'Detox: test the app'

  - ${{ if or(parameters.is_nightly, parameters.is_beta) }}:
    - bash:
        xcodebuild -scheme '$(GYM_SCHEME)' -project '$(GYM_PROJECT)'
          -destination generic/platform=iOS
          -archivePath '$(GYM_ARCHIVE_PATH)'
          archive
      displayName: 'Build app for release with Xcode'

  - ${{ if eq(parameters.is_beta, true) }}:
    - bash:
        bundle exec fastlane run upload_to_testflight
        --distribute_external=true
        --ipa $(format('$(cat ./logs/products)'))
      displayName: 'Upload to TestFlight'

  - ${{ if eq(parameters.is_nightly, true) }}:
    - bash:
        bundle exec fastlane run upload_to_testflight
        --distribute_external=false
        --ipa $(format('$(cat ./logs/products)'))
      displayName: 'Upload to TestFlight'

  - ${{ if or(parameters.is_nightly, parameters.is_beta) }}:
    - bash: ./scripts/ci/sourcemap-create.sh
      displayName: 'Generate sourcemap'
    - bash: ./scripts/ci/sourcemap-upload.sh
      displayName: 'Upload sourcemap to Sentry'

  - task: PublishPipelineArtifact@0
    inputs: {artifactName: 'app_dSYM', targetPath: './ios/build/AllAboutOlaf.app.dSYM.zip'}
    displayName: 'publish app.dsym artifact'

  - task: PublishPipelineArtifact@0
    inputs: {artifactName: 'app_ipa', targetPath: './ios/build/AllAboutOlaf.ipa'}
    displayName: 'publish app.ipa artifact'
