parameters:
  signed: false
  is_nightly: false
  is_beta: false
  SENTRY_PROPERTIES: ../ios/sentry.properties

steps:
  - bash: mkdir -p logs/
    displayName: 'Set up /logs'

  - bash: yarn install --frozen-lockfile
    displayName: 'Install dependencies (yarn)'

  - bash: bundle install --frozen --path ./vendor/bundle
    displayName: 'Install dependencies (bundler)'

  - bash: ./scripts/ci/propagate-version.rb
    displayName: 'Propagate build number into app version file'

  - ? ${{ if or(eq(parameters.is_nightly, False), eq(parameters.is_beta, False)) }}
    : - bash: xcodebuild -scheme '$(GYM_SCHEME)' -project '$(GYM_PROJECT)' -showBuildSettings -derivedDataPath ./ios/build
        displayName: 'Show Xcode build settings (for Detox)'
  - ${{ if or(eq(parameters.is_nightly, True), eq(parameters.is_beta, True)) }}:
      - bash: xcodebuild -scheme '$(GYM_SCHEME)' -project '$(GYM_PROJECT)' -showBuildSettings
        displayName: 'Show Xcode build settings (for release)'

  - bash: ./scripts/ci/ios/discover-products.sh | tee ./logs/products
    displayName: 'Set up products logfile'

  - ${{ if eq(parameters.signed, true) }}:
      - bash: ./scripts/ci/authorize-ci-for-keys.rb
        displayName: '[signed=true] Authorize CI for GitHub access'

      - bash: ./scripts/ci/ios/certificates.sh 'appstore'
        displayName: '[signed=true] Initialize signing certificates'
        env:
          GITHUB_KEYS_REPOSITORY_TOKEN: $(GITHUB_KEYS_REPOSITORY_TOKEN)
          MATCH_PASSWORD: $(MATCH_PASSWORD)

  - bash: xcodebuild
      -scheme '$(GYM_SCHEME)' -project '$(GYM_PROJECT)'
      -configuration Release
      -destination 'platform=iOS Simulator,name=iPhone 7,OS=12.2'
      -derivedDataPath ./ios/build
      CODE_SIGNING_REQUIRED=NO
      CODE_SIGNING_ALLOWED=NO
      CODE_SIGN_IDENTITY=""
      build | xcpretty
    displayName: 'Detox: build app for testing'

  - bash: |
      brew tap wix/brew
      brew install applesimutils
    displayName: 'Detox: install applesimutils'

  # - bash: yarn detox test e2e --configuration ios.sim.release --cleanup
  #   displayName: 'Detox: test the app'

  - ${{ if or(eq(parameters.is_nightly, True), eq(parameters.is_beta, True)) }}:
      - bash: xcodebuild -scheme '$(GYM_SCHEME)' -project '$(GYM_PROJECT)'
          -destination generic/platform=iOS
          -archivePath '$(GYM_ARCHIVE_PATH)'
          archive | xcpretty
        displayName: '[nightly || beta] Build app for releasing'

  - ${{ if eq(parameters.is_beta, True) }}:
      - bash: bundle exec fastlane run upload_to_testflight
          --distribute_external=true
          --ipa $(cat ./logs/products)
        displayName: '[beta=true] Upload to TestFlight'

  - ${{ if eq(parameters.is_nightly, True) }}:
      - bash: bundle exec fastlane run upload_to_testflight
          --distribute_external=false
          --ipa $(cat ./logs/products)
        displayName: '[nightly=true] Upload to TestFlight'

  - ${{ if or(eq(parameters.is_nightly, True), eq(parameters.is_beta, True)) }}:
      - bash: ./scripts/ci/sourcemap-create.sh
        displayName: '[nightly || beta] Generate sourcemap'
      - bash: ./scripts/ci/sourcemap-upload.sh
        displayName: '[nightly || beta] Upload sourcemap to Sentry'

  - bash: tar -c $(cat ./logs/products) | gzip - > ./aao.tar.gz
    displayName: 'compress app bundle into a tarball'

  - task: PublishPipelineArtifact@0
    inputs: {artifactName: 'app', targetPath: './aao.tar.gz'}
    displayName: 'publish app artifact'
